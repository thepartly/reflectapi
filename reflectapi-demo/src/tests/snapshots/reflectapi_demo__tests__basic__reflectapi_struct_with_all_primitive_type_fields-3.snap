---
source: reflectapi-demo/src/tests/basic.rs
expression: "super::into_rust_code::<TestStructWithAllPrimitiveTypeFields>()"
---
// DO NOT MODIFY THIS FILE MANUALLY
// This file was generated by reflectapi-cli
//
// Schema name:
//

#![allow(non_camel_case_types)]
#![allow(dead_code)]

pub use interface::Interface;
pub use reflectapi::rt::*;

pub mod interface {

    #[derive(Debug)]
    pub struct Interface<C: reflectapi::rt::Client + Clone> {
        client: C,
        base_url: reflectapi::rt::Url,
    }

    impl<C: reflectapi::rt::Client + Clone> Interface<C> {
        pub fn try_new(
            client: C,
            base_url: reflectapi::rt::Url,
        ) -> std::result::Result<Self, reflectapi::rt::UrlParseError> {
            if base_url.cannot_be_a_base() {
                return Err(reflectapi::rt::UrlParseError::RelativeUrlWithCannotBeABaseBase);
            }

            Ok(Self { client, base_url })
        }
        pub async fn inout_test(
            &self,
            input: super::types::reflectapi_demo::tests::basic::TestStructWithAllPrimitiveTypeFields,
            headers: reflectapi::Empty,
        ) -> Result<
            super::types::reflectapi_demo::tests::basic::TestStructWithAllPrimitiveTypeFields,
            reflectapi::rt::Error<reflectapi::Empty, C::Error>,
        > {
            reflectapi::rt::__request_impl(
                &self.client,
                self.base_url
                    .join("/inout_test")
                    .expect("checked base_url already and path is valid"),
                input,
                headers,
            )
            .await
        }
    }
}
pub mod types {

    pub mod reflectapi_demo {
        pub mod tests {
            pub mod basic {

                #[derive(Debug, serde::Serialize, serde::Deserialize)]
                pub struct TestStructWithAllPrimitiveTypeFields {
                    pub _f_u8: u8,
                    pub _f_u16: u16,
                    pub _f_u32: u32,
                    pub _f_u64: u64,
                    pub _f_u128: u128,
                    pub _f_usize: usize,
                    pub _f_i8: i8,
                    pub _f_i16: i16,
                    pub _f_i32: i32,
                    pub _f_i64: i64,
                    pub _f_i128: i128,
                    pub _f_isize: isize,
                    pub _f_f32: f32,
                    pub _f_f64: f64,
                    pub _f_bool: bool,
                    pub _f_char: char,
                    pub _f_str: std::string::String,
                    pub _f_unit: (),
                    pub _f_option: std::option::Option<u8>,
                    pub _f_vec: std::vec::Vec<u8>,
                    pub _f_hashmap: std::collections::HashMap<u8, std::string::String>,
                    pub _f_hashset: std::collections::HashSet<u8>,
                    pub _f_tuple: (u8, std::string::String),
                    pub _f_tuple3: (u8, std::string::String, u8),
                    pub _f_tuple4: (u8, std::string::String, u8, std::string::String),
                    pub _f_tuple5: (u8, std::string::String, u8, std::string::String, u8),
                    pub _f_tuple6: (
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                    ),
                    pub _f_tuple7: (
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                    ),
                    pub _f_tuple8: (
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                    ),
                    pub _f_tuple9: (
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                    ),
                    pub _f_tuple10: (
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                    ),
                    pub _f_tuple11: (
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                    ),
                    pub _f_tuple12: (
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                        u8,
                        std::string::String,
                    ),
                    pub _f_array: [u8; 3],
                    pub _f_pointer_box: std::boxed::Box<u8>,
                    pub _f_pointer_arc: std::sync::Arc<u8>,
                    pub _f_pointer_cell: std::cell::Cell<u8>,
                    pub _f_pointer_refcell: std::cell::RefCell<u8>,
                    pub _f_pointer_mutex: std::sync::Mutex<u8>,
                    pub _f_pointer_rwlock: std::sync::RwLock<u8>,
                    pub _f_pointer_weak: std::sync::Weak<u8>,
                    pub _f_phantomdata: std::marker::PhantomData<u8>,
                    pub _f_infallible: reflectapi::Infallible,
                }
            }
        }
    }
}
