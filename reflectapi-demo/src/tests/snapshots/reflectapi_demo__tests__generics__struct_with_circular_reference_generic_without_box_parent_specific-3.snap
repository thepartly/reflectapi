---
source: reflectapi-demo/src/tests/generics.rs
expression: "super::into_input_rust_code::<TestStructWithCircularReferenceGenericWithoutBoxParentSpecific>()"
---
// DO NOT MODIFY THIS FILE MANUALLY
// This file was generated by reflectapi-cli
//
// Schema name:
//

#![allow(non_camel_case_types)]
#![allow(dead_code)]

pub use interface::Interface;
pub use reflectapi::rt::*;

pub mod interface {

    #[derive(Debug)]
    pub struct Interface<C: reflectapi::rt::Client + Clone> {
        client: C,
        base_url: reflectapi::rt::Url,
    }

    impl<C: reflectapi::rt::Client + Clone> Interface<C> {
        pub fn try_new(
            client: C,
            base_url: reflectapi::rt::Url,
        ) -> std::result::Result<Self, reflectapi::rt::UrlParseError> {
            if base_url.cannot_be_a_base() {
                return Err(reflectapi::rt::UrlParseError::RelativeUrlWithCannotBeABaseBase);
            }

            Ok(Self { client, base_url })
        }
        pub async fn input_test(
            &self,
            input: super::types::reflectapi_demo::tests::generics::TestStructWithCircularReferenceGenericWithoutBoxParentSpecific,
            headers: reflectapi::Empty,
        ) -> Result<reflectapi::Empty, reflectapi::rt::Error<reflectapi::Empty, C::Error>> {
            reflectapi::rt::__request_impl(
                &self.client,
                self.base_url
                    .join("/input_test")
                    .expect("checked base_url already and path is valid"),
                input,
                headers,
            )
            .await
        }
    }
}
pub mod types {

    pub mod reflectapi_demo {
        pub mod tests {
            pub mod generics {

                #[derive(Debug, serde::Serialize)]
                pub struct TestStructWithCircularReferenceGenericWithoutBox<A, B> {
                    pub _f1: A,
                    pub _f2: B,
                }

                #[derive(Debug, serde::Serialize)]
                pub struct TestStructWithCircularReferenceGenericWithoutBoxParentSpecific {
    pub _f: super::super::super::reflectapi_demo::tests::generics::TestStructWithCircularReferenceGenericWithoutBox<super::super::super::reflectapi_demo::tests::generics::TestStructWithCircularReferenceGenericWithoutBox<u8, u16>, super::super::super::reflectapi_demo::tests::generics::TestStructWithCircularReferenceGenericWithoutBox<std::string::String, u32>>,
}
            }
        }
    }
}
