---
source: reflectapi-demo/src/tests/serde.rs
expression: "super::into_rust_code::<TestStructTryFormProxy>()"
---
// DO NOT MODIFY THIS FILE MANUALLY
// This file was generated by reflectapi-cli
//
// Schema name:
//

#![allow(non_camel_case_types)]
#![allow(dead_code)]

pub use interface::Interface;
pub use reflectapi::rt::*;

pub mod interface {

    #[derive(Debug)]
    pub struct Interface<C: reflectapi::rt::Client + Clone> {
        client: C,
        base_url: std::string::String,
    }

    impl<C: reflectapi::rt::Client + Clone> Interface<C> {
        pub fn new(client: C, base_url: std::string::String) -> Self {
            Self { client, base_url }
        }
        pub async fn inout_test(
            &self,
            input: super::types::reflectapi_demo::tests::serde::input::TestStructTryFormProxy,
            headers: reflectapi::Empty,
        ) -> Result<
            super::types::reflectapi_demo::tests::serde::output::TestStructTryFormProxy,
            reflectapi::rt::Error<reflectapi::Empty, C::Error>,
        > {
            reflectapi::rt::__request_impl(
                &self.client,
                &self.base_url,
                "/inout_test",
                input,
                headers,
            )
            .await
        }
    }
}
pub mod types {

    pub mod reflectapi_demo {
        pub mod tests {
            pub mod serde {

                #[derive(Debug, serde::Serialize)]
                pub struct TestStructTryFrom {
                    pub f: u8,
                }
                pub mod input {

                    pub type TestStructTryFormProxy = super::super::super::super::reflectapi_demo::tests::serde::TestStructTryFrom;
                }
                pub mod output {

                    #[derive(Debug, serde::Deserialize)]
                    pub struct TestStructTryFormProxy {
                        pub f: u8,
                    }
                }
            }
        }
    }
}
