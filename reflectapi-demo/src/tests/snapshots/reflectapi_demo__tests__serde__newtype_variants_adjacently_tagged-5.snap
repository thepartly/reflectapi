---
source: reflectapi-demo/src/tests/serde.rs
expression: "super :: into_python_code :: < TestNewtypeVariantsAdjacentlyTagged > ()"
---
"""
Generated Python client for api_client.

DO NOT MODIFY THIS FILE MANUALLY.
This file is automatically generated by `reflectapi`.
""""

from __future__ import annotations


# Standard library imports
from enum import Enum
from typing import Annotated, Any, Generic, Optional, TypeVar, Union

# Third-party imports
from pydantic import BaseModel, ConfigDict

# Runtime imports
from reflectapi_runtime import AsyncClientBase, ClientBase, ApiResponse
from reflectapi_runtime import ReflectapiEmpty
from reflectapi_runtime import ReflectapiInfallible
from reflectapi_runtime.testing import MockClient, create_api_response


class ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedIntVariant(BaseModel):
    """int variant"""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    field_0: int


class ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedStringVariant(BaseModel):
    """string variant"""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    field_0: str


class ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedBoolVariant(BaseModel):
    """bool variant"""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    field_0: bool


# Adjacently tagged enum using RootModel
ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedVariants = Union[ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedIntVariant, ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedStringVariant, ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedBoolVariant, Literal["unit"]]

class ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged(RootModel[ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedVariants]):
    """Adjacently tagged enum"""

    @model_validator(mode='before')
    @classmethod
    def _validate_adjacently_tagged(cls, data):
        # Handle direct variant instances
        if isinstance(data, (ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedIntVariant, ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedStringVariant, ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedBoolVariant)):
            return data
        if isinstance(data, dict):
            tag = data.get('t')
            content = data.get('c')
            if tag is None:
                raise ValueError("Missing tag field 't'")
            if content is None and tag not in ('unit'):
                raise ValueError("Missing content field 'c' for tag: {}".format(tag))
            # Dispatch based on tag
            if tag == "int":
                return ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedIntVariant(field_0=content)
            if tag == "string":
                return ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedStringVariant(field_0=content)
            if tag == "bool":
                return ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedBoolVariant(field_0=content)
            if tag == "unit":
                return "unit"
        raise ValueError("Unknown variant for ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged: {}".format(data))

    @model_serializer
    def _serialize_adjacently_tagged(self):
        if isinstance(self.root, ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedIntVariant):
            return {"t": "int", "c": self.root.field_0}
        if isinstance(self.root, ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedStringVariant):
            return {"t": "string", "c": self.root.field_0}
        if isinstance(self.root, ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedBoolVariant):
            return {"t": "bool", "c": self.root.field_0}
        if self.root == "unit":
            return {"t": "unit"}
        raise ValueError(f"Cannot serialize ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged variant: {type(self.root)}")


class AsyncInoutClient:
    """Async client for inout operations."""

    def __init__(self, client: AsyncClientBase) -> None:
        self._client = client


    async def test(
        self,
        data: Optional[ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged] = None,
    ) -> ApiResponse[ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged]:
        """

        Args:
            data: Request data for the test operation.

        Returns:
            ApiResponse[ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged]: Response containing ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged data
        """
        path = "/inout_test"

        params: dict[str, Any] = {}

        return await self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            response_model=ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged,
)


class AsyncClient(AsyncClientBase):
    """Async client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.inout = AsyncInoutClient(self)


class InoutClient:
    """Synchronous client for inout operations."""

    def __init__(self, client: ClientBase) -> None:
        self._client = client


    def test(
        self,
        data: Optional[ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged] = None,
    ) -> ApiResponse[ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged]:
        """

        Args:
            data: Request data for the test operation.

        Returns:
            ApiResponse[ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged]: Response containing ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged data
        """
        path = "/inout_test"

        params: dict[str, Any] = {}

        return self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            response_model=ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged,
)


class Client(ClientBase):
    """Synchronous client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.inout = InoutClient(self)


# External type definitions
StdNumNonZeroU32 = Annotated[int, "Rust NonZero u32 type"]
StdNumNonZeroU64 = Annotated[int, "Rust NonZero u64 type"]
StdNumNonZeroI32 = Annotated[int, "Rust NonZero i32 type"]
StdNumNonZeroI64 = Annotated[int, "Rust NonZero i64 type"]

# Rebuild models to resolve forward references
try:
    ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged.model_rebuild()
except AttributeError:
    # Some types may not have model_rebuild method
    pass

# Factory classes (generated after model rebuild to avoid forward references)
class ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedFactory:
    """Factory class for creating ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged variants with ergonomic syntax.

    ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged variants
    ""

    @staticmethod
    def int(field_0) -> ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged:
        """Creates the 'int' variant of the ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged enum."""
        return ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged(ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedIntVariant(field_0=field_0))

    @staticmethod
    def string(field_0) -> ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged:
        """Creates the 'string' variant of the ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged enum."""
        return ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged(ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedStringVariant(field_0=field_0))

    @staticmethod
    def bool(field_0) -> ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged:
        """Creates the 'bool' variant of the ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged enum."""
        return ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged(ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTaggedBoolVariant(field_0=field_0))

    @staticmethod
    def unit() -> ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged:
        """Creates the 'unit' variant of the ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged enum."""
        return ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged.model_validate({"t": "unit"})


# Testing utilities


def create_reflectapidemotestsserdetestnewtypevariantsadjacentlytagged_response(value: ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged) -> ApiResponse[ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged]:
    """Create a mock ApiResponse for ReflectapiDemoTestsSerdeTestNewtypeVariantsAdjacentlyTagged."""
    return create_api_response(value)


def create_mock_client() -> MockClient:
    """Create a mock client for testing."""
    return MockClient()
