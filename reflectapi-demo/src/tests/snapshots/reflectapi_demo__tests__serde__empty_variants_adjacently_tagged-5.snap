---
source: reflectapi-demo/src/tests/serde.rs
expression: "super :: into_python_code :: < TestEmptyVariantsAdjacentlyTagged > ()"
---
"""
Generated Python client for api_client.

DO NOT MODIFY THIS FILE MANUALLY.
This file is automatically generated by ReflectAPI.
"""

from __future__ import annotations


# Standard library imports
from enum import Enum
from typing import Annotated, Any, Generic, Optional, TypeVar, Union

# Third-party imports
from pydantic import BaseModel, ConfigDict

# Runtime imports
from reflectapi_runtime import AsyncClientBase, ClientBase, ApiResponse
from reflectapi_runtime import ReflectapiEmpty
from reflectapi_runtime import ReflectapiInfallible
from reflectapi_runtime.testing import MockClient, create_api_response


class ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTaggedEmptyUnitVariant(
    BaseModel
):
    """EmptyUnit variant"""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)


class ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTaggedEmptyStructVariant(
    BaseModel
):
    """EmptyStruct variant"""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)


# Adjacently tagged enum using RootModel
ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTaggedVariants = Union[
    Literal["Empty"],
    ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTaggedEmptyUnitVariant,
    ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTaggedEmptyStructVariant,
]


class ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged(
    RootModel[ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTaggedVariants]
):
    """Adjacently tagged enum"""

    @model_validator(mode="before")
    @classmethod
    def _validate_adjacently_tagged(cls, data):
        # Handle direct variant instances
        if isinstance(
            data,
            (
                ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTaggedEmptyUnitVariant,
                ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTaggedEmptyStructVariant,
            ),
        ):
            return data
        if isinstance(data, dict):
            tag = data.get("t")
            content = data.get("c")
            if tag is None:
                raise ValueError("Missing tag field 't'")
            if content is None and tag not in ("Empty"):
                raise ValueError("Missing content field 'c' for tag: {}".format(tag))
            # Dispatch based on tag
            if tag == "Empty":
                return "Empty"
            if tag == "EmptyUnit":
                if isinstance(content, list):
                    return ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTaggedEmptyUnitVariant()
                else:
                    raise ValueError("Expected list for tuple variant EmptyUnit")
            if tag == "EmptyStruct":
                return ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTaggedEmptyStructVariant(
                    **content
                )
        raise ValueError(
            "Unknown variant for ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged: {}".format(
                data
            )
        )

    @model_serializer
    def _serialize_adjacently_tagged(self):
        if self.root == "Empty":
            return {"t": "Empty"}
        if isinstance(
            self.root,
            ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTaggedEmptyUnitVariant,
        ):
            return {"t": "EmptyUnit", "c": []}
        if isinstance(
            self.root,
            ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTaggedEmptyStructVariant,
        ):
            return {"t": "EmptyStruct", "c": self.root.model_dump(exclude_none=True)}
        raise ValueError(
            f"Cannot serialize ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged variant: {type(self.root)}"
        )


class AsyncInoutClient:
    """Async client for inout operations."""

    def __init__(self, client: AsyncClientBase) -> None:
        self._client = client

    async def test(
        self,
        data: Optional[
            ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged
        ] = None,
    ) -> ApiResponse[ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged]:
        """

        Args:
            data: Request data for the test operation.

        Returns:
            ApiResponse[ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged]: Response containing ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged data
        """
        path = "/inout_test"

        params: dict[str, Any] = {}

        return await self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            response_model=ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged,
        )


class AsyncClient(AsyncClientBase):
    """Async client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.inout = AsyncInoutClient(self)


class InoutClient:
    """Synchronous client for inout operations."""

    def __init__(self, client: ClientBase) -> None:
        self._client = client

    def test(
        self,
        data: Optional[
            ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged
        ] = None,
    ) -> ApiResponse[ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged]:
        """

        Args:
            data: Request data for the test operation.

        Returns:
            ApiResponse[ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged]: Response containing ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged data
        """
        path = "/inout_test"

        params: dict[str, Any] = {}

        return self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            response_model=ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged,
        )


class Client(ClientBase):
    """Synchronous client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.inout = InoutClient(self)


# External type definitions
StdNumNonZeroU32 = Annotated[int, "Rust NonZero u32 type"]
StdNumNonZeroU64 = Annotated[int, "Rust NonZero u64 type"]
StdNumNonZeroI32 = Annotated[int, "Rust NonZero i32 type"]
StdNumNonZeroI64 = Annotated[int, "Rust NonZero i64 type"]

# Rebuild models to resolve forward references
try:
    ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged.model_rebuild()
except AttributeError:
    # Some types may not have model_rebuild method
    pass


# Factory classes (generated after model rebuild to avoid forward references)
class ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTaggedFactory:
    """Factory class for creating ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged variants with ergonomic syntax.

    ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged variants
    """

    @staticmethod
    def empty() -> ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged:
        """Creates the 'Empty' variant of the ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged enum."""
        return ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged.model_validate(
            {"t": "Empty"}
        )

    @staticmethod
    def empty_unit() -> ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged:
        """Creates the 'EmptyUnit' variant of the ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged enum."""
        return ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged(
            ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTaggedEmptyUnitVariant()
        )

    @staticmethod
    def empty_struct() -> ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged:
        """Creates the 'EmptyStruct' variant of the ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged enum."""
        return ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged(
            ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTaggedEmptyStructVariant()
        )


# Testing utilities


def create_reflectapidemotestsserdetestemptyvariantsadjacentlytagged_response(
    value: ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged,
) -> ApiResponse[ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged]:
    """Create a mock ApiResponse for ReflectapiDemoTestsSerdeTestEmptyVariantsAdjacentlyTagged."""
    return create_api_response(value)


def create_mock_client() -> MockClient:
    """Create a mock client for testing."""
    return MockClient()
