---
source: reflectapi-demo/src/tests/serde.rs
expression: "super :: into_python_code :: < TestEnumWithFieldSkip > ()"
---
'''
Generated Python client for api_client.

DO NOT MODIFY THIS FILE MANUALLY.
This file is automatically generated by ReflectAPI.
'''

from __future__ import annotations


# Standard library imports
from enum import Enum
from typing import Annotated, Any, Generic, Optional, TypeVar, Union

# Third-party imports
from pydantic import BaseModel, ConfigDict, PrivateAttr, RootModel, model_serializer, model_validator

# Runtime imports
from reflectapi_runtime import AsyncClientBase, ClientBase, ApiResponse
from reflectapi_runtime import ReflectapiEmpty
from reflectapi_runtime import ReflectapiInfallible
from reflectapi_runtime.testing import MockClient, create_api_response


class ReflectapiDemoTestsSerdeTestEnumWithFieldSkipVariant1Variant(BaseModel):
    """Variant1 variant"""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)


# Externally tagged enum using RootModel
ReflectapiDemoTestsSerdeTestEnumWithFieldSkipVariants = ReflectapiDemoTestsSerdeTestEnumWithFieldSkipVariant1Variant

class ReflectapiDemoTestsSerdeTestEnumWithFieldSkip(RootModel[ReflectapiDemoTestsSerdeTestEnumWithFieldSkipVariants]):
    """Externally tagged enum"""


    @model_validator(mode='before')
    @classmethod
    def _validate_externally_tagged(cls, data):
        # Handle direct variant instances (for programmatic creation)
        if isinstance(data, ReflectapiDemoTestsSerdeTestEnumWithFieldSkipVariant1Variant):
            return data

        # Handle JSON data (for deserialization)


        if isinstance(data, dict):
            if len(data) != 1:
                raise ValueError("Externally tagged enum must have exactly one key")

            key, value = next(iter(data.items()))
            if key == "Variant1":
                return ReflectapiDemoTestsSerdeTestEnumWithFieldSkipVariant1Variant(**value)

        raise ValueError(f"Unknown variant for ReflectapiDemoTestsSerdeTestEnumWithFieldSkip: {data}")

    @model_serializer
    def _serialize_externally_tagged(self):
        if isinstance(self.root, ReflectapiDemoTestsSerdeTestEnumWithFieldSkipVariant1Variant):
            return {"Variant1": self.root.model_dump(exclude_none=True)}

        raise ValueError(f"Cannot serialize ReflectapiDemoTestsSerdeTestEnumWithFieldSkip variant: {type(self.root)}")


class AsyncInoutClient:
    """Async client for inout operations."""

    def __init__(self, client: AsyncClientBase) -> None:
        self._client = client


    async def test(
        self,
        data: Optional[ReflectapiDemoTestsSerdeTestEnumWithFieldSkip] = None,
    ) -> ApiResponse[ReflectapiDemoTestsSerdeTestEnumWithFieldSkip]:
        """

        Args:
            data: Request data for the test operation.

        Returns:
            ApiResponse[ReflectapiDemoTestsSerdeTestEnumWithFieldSkip]: Response containing ReflectapiDemoTestsSerdeTestEnumWithFieldSkip data
        """
        path = "/inout_test"

        params: dict[str, Any] = {}
        return await self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            response_model=ReflectapiDemoTestsSerdeTestEnumWithFieldSkip,
)


class AsyncClient(AsyncClientBase):
    """Async client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.inout = AsyncInoutClient(self)


class InoutClient:
    """Synchronous client for inout operations."""

    def __init__(self, client: ClientBase) -> None:
        self._client = client


    def test(
        self,
        data: Optional[ReflectapiDemoTestsSerdeTestEnumWithFieldSkip] = None,
    ) -> ApiResponse[ReflectapiDemoTestsSerdeTestEnumWithFieldSkip]:
        """

        Args:
            data: Request data for the test operation.

        Returns:
            ApiResponse[ReflectapiDemoTestsSerdeTestEnumWithFieldSkip]: Response containing ReflectapiDemoTestsSerdeTestEnumWithFieldSkip data
        """
        path = "/inout_test"

        params: dict[str, Any] = {}
        return self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            response_model=ReflectapiDemoTestsSerdeTestEnumWithFieldSkip,
)


class Client(ClientBase):
    """Synchronous client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.inout = InoutClient(self)


# External type definitions
StdNumNonZeroU32 = Annotated[int, "Rust NonZero u32 type"]
StdNumNonZeroU64 = Annotated[int, "Rust NonZero u64 type"]
StdNumNonZeroI32 = Annotated[int, "Rust NonZero i32 type"]
StdNumNonZeroI64 = Annotated[int, "Rust NonZero i64 type"]

# Rebuild models to resolve forward references
try:
    ReflectapiDemoTestsSerdeTestEnumWithFieldSkip.model_rebuild()
except AttributeError:
    # Some types may not have model_rebuild method
    pass

# Factory classes (generated after model rebuild to avoid forward references)
class ReflectapiDemoTestsSerdeTestEnumWithFieldSkipFactory:
    '''Factory class for creating ReflectapiDemoTestsSerdeTestEnumWithFieldSkip variants with ergonomic syntax.

    ReflectapiDemoTestsSerdeTestEnumWithFieldSkip variants
    '''

    @staticmethod
    def variant1() -> ReflectapiDemoTestsSerdeTestEnumWithFieldSkip:
        '''Creates the 'Variant1' variant of the ReflectapiDemoTestsSerdeTestEnumWithFieldSkip enum.'''
        return ReflectapiDemoTestsSerdeTestEnumWithFieldSkip(ReflectapiDemoTestsSerdeTestEnumWithFieldSkipVariant1Variant())


# Testing utilities


def create_reflectapidemotestsserdetestenumwithfieldskip_response(value: ReflectapiDemoTestsSerdeTestEnumWithFieldSkip) -> ApiResponse[ReflectapiDemoTestsSerdeTestEnumWithFieldSkip]:
    """Create a mock ApiResponse for ReflectapiDemoTestsSerdeTestEnumWithFieldSkip."""
    return create_api_response(value)


def create_mock_client() -> MockClient:
    """Create a mock client for testing."""
    return MockClient()
