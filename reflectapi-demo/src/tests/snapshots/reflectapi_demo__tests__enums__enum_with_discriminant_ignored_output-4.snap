---
source: reflectapi-demo/src/tests/enums.rs
expression: "super :: into_output_python_code :: < TestEnumWithDiscriminantIgnored > ()"
---
'''
Generated Python client for api_client.

DO NOT MODIFY THIS FILE MANUALLY.
This file is automatically generated by ReflectAPI.
'''

from __future__ import annotations


# Standard library imports
from enum import Enum
from typing import Annotated, Any, Generic, Optional, TypeVar, Union

# Third-party imports
from pydantic import BaseModel, ConfigDict

# Runtime imports
from reflectapi_runtime import AsyncClientBase, ClientBase, ApiResponse
from reflectapi_runtime import ReflectapiEmpty
from reflectapi_runtime import ReflectapiInfallible
from reflectapi_runtime.testing import MockClient, create_api_response


class ReflectapiDemoTestsEnumsTestEnumWithDiscriminantIgnored(str, Enum):
    """Generated enum."""


    VARIANT1 = "Variant1"
    VARIANT2 = "Variant2"


class AsyncOutputClient:
    """Async client for output operations."""

    def __init__(self, client: AsyncClientBase) -> None:
        self._client = client


    async def test(
        self,
    ) -> ApiResponse[ReflectapiDemoTestsEnumsTestEnumWithDiscriminantIgnored]:
        """

        Returns:
            ApiResponse[ReflectapiDemoTestsEnumsTestEnumWithDiscriminantIgnored]: Response containing ReflectapiDemoTestsEnumsTestEnumWithDiscriminantIgnored data
        """
        path = "/output_test"

        params: dict[str, Any] = {}
        return await self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            response_model=ReflectapiDemoTestsEnumsTestEnumWithDiscriminantIgnored,
)


class AsyncClient(AsyncClientBase):
    """Async client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.output = AsyncOutputClient(self)


class OutputClient:
    """Synchronous client for output operations."""

    def __init__(self, client: ClientBase) -> None:
        self._client = client


    def test(
        self,
    ) -> ApiResponse[ReflectapiDemoTestsEnumsTestEnumWithDiscriminantIgnored]:
        """

        Returns:
            ApiResponse[ReflectapiDemoTestsEnumsTestEnumWithDiscriminantIgnored]: Response containing ReflectapiDemoTestsEnumsTestEnumWithDiscriminantIgnored data
        """
        path = "/output_test"

        params: dict[str, Any] = {}
        return self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            response_model=ReflectapiDemoTestsEnumsTestEnumWithDiscriminantIgnored,
)


class Client(ClientBase):
    """Synchronous client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.output = OutputClient(self)


# External type definitions
StdNumNonZeroU32 = Annotated[int, "Rust NonZero u32 type"]
StdNumNonZeroU64 = Annotated[int, "Rust NonZero u64 type"]
StdNumNonZeroI32 = Annotated[int, "Rust NonZero i32 type"]
StdNumNonZeroI64 = Annotated[int, "Rust NonZero i64 type"]

# Rebuild models to resolve forward references
try:
    ReflectapiDemoTestsEnumsTestEnumWithDiscriminantIgnored.model_rebuild()
except AttributeError:
    # Some types may not have model_rebuild method
    pass

# Factory classes (generated after model rebuild to avoid forward references)

# Testing utilities


def create_reflectapidemotestsenumstestenumwithdiscriminantignored_response(value: ReflectapiDemoTestsEnumsTestEnumWithDiscriminantIgnored) -> ApiResponse[ReflectapiDemoTestsEnumsTestEnumWithDiscriminantIgnored]:
    """Create a mock ApiResponse for ReflectapiDemoTestsEnumsTestEnumWithDiscriminantIgnored."""
    return create_api_response(value)


def create_mock_client() -> MockClient:
    """Create a mock client for testing."""
    return MockClient()
