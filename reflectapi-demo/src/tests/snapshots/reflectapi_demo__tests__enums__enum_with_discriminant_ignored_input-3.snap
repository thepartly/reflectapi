---
source: reflectapi-demo/src/tests/enums.rs
expression: "super::into_input_rust_code::<TestEnumWithDiscriminantIgnored>()"
---
// DO NOT MODIFY THIS FILE MANUALLY
// This file was generated by reflectapi-cli
//
// Schema name:
//

#![allow(non_camel_case_types)]
#![allow(dead_code)]

pub use interface::Interface;

pub mod interface {

    #[derive(Debug)]
    pub struct Interface<C: super::Client + Clone> {
        client: C,
        base_url: std::string::String,
    }

    impl<C: super::Client + Clone> Interface<C> {
        pub fn new(client: C, base_url: std::string::String) -> Self {
            Self { client, base_url }
        }
        pub async fn input_test(
            &self,
            input: super::types::reflectapi_demo::tests::enums::TestEnumWithDiscriminantIgnored,
            headers: reflectapi::Empty,
        ) -> Result<reflectapi::Empty, super::Error<reflectapi::Empty, C::Error>> {
            super::__request_impl(&self.client, &self.base_url, "/input_test", input, headers).await
        }
    }
}
pub mod types {

    pub mod reflectapi_demo {
        pub mod tests {
            pub mod enums {

                #[derive(Debug, serde::Serialize)]
                pub enum TestEnumWithDiscriminantIgnored {
                    Variant1,
                    Variant2,
                }
            }
        }
    }
}
