---
source: reflectapi-demo/src/tests/basic.rs
expression: "super::into_rust_code::<TestStructOneBasicFieldStringReflectBothDifferently>()"
---
// DO NOT MODIFY THIS FILE MANUALLY
// This file was generated by reflectapi-cli
//
// Schema name:
//

#![allow(non_camel_case_types)]
#![allow(dead_code)]

pub use interface::Interface;

pub mod interface {

    #[derive(Debug)]
    pub struct Interface<C: super::Client + Clone> {
        client: C,
        base_url: std::string::String,
    }

    impl<C: super::Client + Clone> Interface<C> {
        pub fn new(client: C, base_url: std::string::String) -> Self {
            Self { client, base_url }
        }
    pub async fn inout_test(&self, input: super::types::reflectapi_demo::tests::basic::input::TestStructOneBasicFieldStringReflectBothDifferently, headers: reflectapi::Empty)
        -> Result<super::types::reflectapi_demo::tests::basic::output::TestStructOneBasicFieldStringReflectBothDifferently, super::Error<reflectapi::Empty, C::Error>>{
            super::__request_impl(&self.client, &self.base_url, "/inout_test", input, headers).await
        }
    }
}
pub mod types {

    pub mod reflectapi_demo {
        pub mod tests {
            pub mod basic {
                pub mod input {

                    #[derive(Debug, serde::Serialize)]
                    pub struct TestStructOneBasicFieldStringReflectBothDifferently {
                        pub _f: i32,
                    }
                }
                pub mod output {

                    #[derive(Debug, serde::Deserialize)]
                    pub struct TestStructOneBasicFieldStringReflectBothDifferently {
                        pub _f: u32,
                    }
                }
            }
        }
    }
}
