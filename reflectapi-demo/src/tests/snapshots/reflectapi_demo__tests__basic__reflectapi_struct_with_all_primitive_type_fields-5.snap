---
source: reflectapi-demo/src/tests/basic.rs
expression: "super :: into_python_code :: < TestStructWithAllPrimitiveTypeFields > ()"
---
"""
Generated Python client for api_client.

DO NOT MODIFY THIS FILE MANUALLY.
This file is automatically generated by `reflectapi`.
""""

from __future__ import annotations


# Standard library imports
from enum import Enum
from typing import Annotated, Any, Generic, Optional, TypeVar, Union

# Third-party imports
from pydantic import BaseModel, ConfigDict

# Runtime imports
from reflectapi_runtime import AsyncClientBase, ClientBase, ApiResponse
from reflectapi_runtime import ReflectapiEmpty
from reflectapi_runtime import ReflectapiInfallible
from reflectapi_runtime.testing import MockClient, create_api_response


class ReflectapiDemoTestsBasicTestStructWithAllPrimitiveTypeFields(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    _f_u8: int
    _f_u16: int
    _f_u32: int
    _f_u64: int
    _f_u128: U128
    _f_usize: int
    _f_i8: int
    _f_i16: int
    _f_i32: int
    _f_i64: int
    _f_i128: I128
    _f_isize: int
    _f_f32: float
    _f_f64: float
    _f_bool: bool
    _f_char: Char
    _f_str: str
    _f_unit: None
    _f_option: int | None = None
    _f_vec: bytes
    _f_hashmap: dict[int, str]
    _f_hashset: bytes
    _f_tuple: StdTupleTuple2[int, str]
    _f_tuple3: StdTupleTuple3[int, str, int]
    _f_tuple4: StdTupleTuple4[int, str, int, str]
    _f_tuple5: StdTupleTuple5[int, str, int, str, int]
    _f_tuple6: StdTupleTuple6[int, str, int, str, int, str]
    _f_tuple7: StdTupleTuple7[int, str, int, str, int, str, int]
    _f_tuple8: StdTupleTuple8[int, str, int, str, int, str, int, str]
    _f_tuple9: StdTupleTuple9[int, str, int, str, int, str, int, str, int]
    _f_tuple10: StdTupleTuple10[int, str, int, str, int, str, int, str, int, str]
    _f_tuple11: StdTupleTuple11[int, str, int, str, int, str, int, str, int, str, int]
    _f_tuple12: StdTupleTuple12[int, str, int, str, int, str, int, str, int, str, int, str]
    _f_array: bytes
    _f_pointer_box: int
    _f_pointer_arc: int
    _f_pointer_cell: int
    _f_pointer_refcell: int
    _f_pointer_mutex: int
    _f_pointer_rwlock: int
    _f_pointer_weak: int
    _f_phantomdata: StdMarkerPhantomData[int]
    _f_infallible: ReflectapiInfallible


class AsyncInoutClient:
    """Async client for inout operations."""

    def __init__(self, client: AsyncClientBase) -> None:
        self._client = client


    async def test(
        self,
        data: Optional[ReflectapiDemoTestsBasicTestStructWithAllPrimitiveTypeFields] = None,
    ) -> ApiResponse[ReflectapiDemoTestsBasicTestStructWithAllPrimitiveTypeFields]:
        """

        Args:
            data: Request data for the test operation.

        Returns:
            ApiResponse[ReflectapiDemoTestsBasicTestStructWithAllPrimitiveTypeFields]: Response containing ReflectapiDemoTestsBasicTestStructWithAllPrimitiveTypeFields data
        """
        path = "/inout_test"

        params: dict[str, Any] = {}

        return await self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            response_model=ReflectapiDemoTestsBasicTestStructWithAllPrimitiveTypeFields,
)


class AsyncClient(AsyncClientBase):
    """Async client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.inout = AsyncInoutClient(self)


class InoutClient:
    """Synchronous client for inout operations."""

    def __init__(self, client: ClientBase) -> None:
        self._client = client


    def test(
        self,
        data: Optional[ReflectapiDemoTestsBasicTestStructWithAllPrimitiveTypeFields] = None,
    ) -> ApiResponse[ReflectapiDemoTestsBasicTestStructWithAllPrimitiveTypeFields]:
        """

        Args:
            data: Request data for the test operation.

        Returns:
            ApiResponse[ReflectapiDemoTestsBasicTestStructWithAllPrimitiveTypeFields]: Response containing ReflectapiDemoTestsBasicTestStructWithAllPrimitiveTypeFields data
        """
        path = "/inout_test"

        params: dict[str, Any] = {}

        return self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            response_model=ReflectapiDemoTestsBasicTestStructWithAllPrimitiveTypeFields,
)


class Client(ClientBase):
    """Synchronous client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.inout = InoutClient(self)


# External type definitions
StdNumNonZeroU32 = Annotated[int, "Rust NonZero u32 type"]
StdNumNonZeroU64 = Annotated[int, "Rust NonZero u64 type"]
StdNumNonZeroI32 = Annotated[int, "Rust NonZero i32 type"]
StdNumNonZeroI64 = Annotated[int, "Rust NonZero i64 type"]

# Rebuild models to resolve forward references
try:
    ReflectapiDemoTestsBasicTestStructWithAllPrimitiveTypeFields.model_rebuild()
except AttributeError:
    # Some types may not have model_rebuild method
    pass

# Factory classes (generated after model rebuild to avoid forward references)

# Testing utilities


def create_reflectapidemotestsbasicteststructwithallprimitivetypefields_response(value: ReflectapiDemoTestsBasicTestStructWithAllPrimitiveTypeFields) -> ApiResponse[ReflectapiDemoTestsBasicTestStructWithAllPrimitiveTypeFields]:
    """Create a mock ApiResponse for ReflectapiDemoTestsBasicTestStructWithAllPrimitiveTypeFields."""
    return create_api_response(value)


def create_mock_client() -> MockClient:
    """Create a mock client for testing."""
    return MockClient()
