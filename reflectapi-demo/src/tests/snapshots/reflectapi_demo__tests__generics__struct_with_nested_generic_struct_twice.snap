---
source: reflectapi-demo/src/tests/generics.rs
expression: "super::into_input_schema::<TestStructWithNestedGenericStructTwice>().input_types"
---
{
  "types": [
    {
      "kind": "struct",
      "id": {
        "kind": "Struct",
        "path": [
          "reflectapi::Empty"
        ],
        "disambiguator": 0
      },
      "name": "reflectapi::Empty",
      "description": "Struct object with no fields",
      "fields": "none"
    },
    {
      "kind": "struct",
      "id": {
        "kind": "Struct",
        "path": [
          "TestStructWithNestedGenericStructTwice"
        ],
        "disambiguator": 0
      },
      "name": "reflectapi_demo::tests::generics::TestStructWithNestedGenericStructTwice",
      "fields": {
        "named": [
          {
            "id": {
              "kind": "Field",
              "path": [
                "_f"
              ],
              "disambiguator": 0
            },
            "name": "_f",
            "type": {
              "name": "reflectapi_demo::tests::generics::TestStructWithSimpleGeneric",
              "arguments": [
                {
                  "name": "u8"
                }
              ]
            },
            "required": true
          },
          {
            "id": {
              "kind": "Field",
              "path": [
                "_f2"
              ],
              "disambiguator": 0
            },
            "name": "_f2",
            "type": {
              "name": "reflectapi_demo::tests::generics::TestStructWithSimpleGeneric",
              "arguments": [
                {
                  "name": "std::string::String"
                }
              ]
            },
            "required": true
          }
        ]
      }
    },
    {
      "kind": "struct",
      "id": {
        "kind": "Struct",
        "path": [
          "TestStructWithSimpleGeneric"
        ],
        "disambiguator": 0
      },
      "name": "reflectapi_demo::tests::generics::TestStructWithSimpleGeneric",
      "parameters": [
        {
          "name": "A"
        }
      ],
      "fields": {
        "named": [
          {
            "id": {
              "kind": "Field",
              "path": [
                "_f"
              ],
              "disambiguator": 0
            },
            "name": "_f",
            "type": {
              "name": "A"
            },
            "required": true
          }
        ]
      }
    },
    {
      "kind": "primitive",
      "id": {
        "kind": "Primitive",
        "path": [
          "std::string::String"
        ],
        "disambiguator": 0
      },
      "name": "std::string::String",
      "description": "UTF-8 encoded string"
    },
    {
      "kind": "primitive",
      "id": {
        "kind": "Primitive",
        "path": [
          "u8"
        ],
        "disambiguator": 0
      },
      "name": "u8",
      "description": "8-bit unsigned integer"
    }
  ]
}
