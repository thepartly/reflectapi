---
source: reflectapi-demo/src/tests/serde.rs
expression: "super :: into_python_code :: < Test > ()"
---
"""
Generated Python client for api_client.

DO NOT MODIFY THIS FILE MANUALLY.
This file is automatically generated by ReflectAPI.
"""

from __future__ import annotations


# Standard library imports
from enum import Enum
from typing import Annotated, Any, Generic, Literal, Optional, TypeVar, Union

# Third-party imports
from pydantic import BaseModel, ConfigDict, Field, RootModel

# Runtime imports
from reflectapi_runtime import AsyncClientBase, ClientBase, ApiResponse
from reflectapi_runtime import ReflectapiEmpty
from reflectapi_runtime import ReflectapiInfallible
from reflectapi_runtime.testing import MockClient, create_api_response


class ReflectapiDemoTestsSerdeV2C(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    type: Literal["C"] = "C"
    c: int


class ReflectapiDemoTestsSerdeV2D(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    type: Literal["D"] = "D"
    d: int


class ReflectapiDemoTestsSerdeV2(RootModel):
    root: Annotated[
        Union[ReflectapiDemoTestsSerdeV2C, ReflectapiDemoTestsSerdeV2D],
        Field(discriminator="type"),
    ]


class ReflectapiDemoTestsSerdeV1A(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    type: Literal["A"] = "A"
    a: int


class ReflectapiDemoTestsSerdeV1B(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    type: Literal["B"] = "B"
    b: int


class ReflectapiDemoTestsSerdeV1(RootModel):
    root: Annotated[
        Union[ReflectapiDemoTestsSerdeV1A, ReflectapiDemoTestsSerdeV1B],
        Field(discriminator="type"),
    ]


class ReflectapiDemoTestsSerdeTestV1(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    version: Literal["v1"] = "v1"
    value: ReflectapiDemoTestsSerdeV1


class ReflectapiDemoTestsSerdeTestV2(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    version: Literal["v2"] = "v2"
    value: ReflectapiDemoTestsSerdeV2


class ReflectapiDemoTestsSerdeTest(RootModel):
    root: Annotated[
        Union[ReflectapiDemoTestsSerdeTestV1, ReflectapiDemoTestsSerdeTestV2],
        Field(discriminator="version"),
    ]


class AsyncInoutClient:
    """Async client for inout operations."""

    def __init__(self, client: AsyncClientBase) -> None:
        self._client = client

    async def test(
        self,
        data: Optional[ReflectapiDemoTestsSerdeTest] = None,
    ) -> ApiResponse[ReflectapiDemoTestsSerdeTest]:
        """

        Args:
            data: Request data for the test operation.

        Returns:
            ApiResponse[ReflectapiDemoTestsSerdeTest]: Response containing ReflectapiDemoTestsSerdeTest data
        """
        path = "/inout_test"

        params: dict[str, Any] = {}

        return await self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            response_model=ReflectapiDemoTestsSerdeTest,
        )


class AsyncClient(AsyncClientBase):
    """Async client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.inout = AsyncInoutClient(self)


class InoutClient:
    """Synchronous client for inout operations."""

    def __init__(self, client: ClientBase) -> None:
        self._client = client

    def test(
        self,
        data: Optional[ReflectapiDemoTestsSerdeTest] = None,
    ) -> ApiResponse[ReflectapiDemoTestsSerdeTest]:
        """

        Args:
            data: Request data for the test operation.

        Returns:
            ApiResponse[ReflectapiDemoTestsSerdeTest]: Response containing ReflectapiDemoTestsSerdeTest data
        """
        path = "/inout_test"

        params: dict[str, Any] = {}

        return self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            response_model=ReflectapiDemoTestsSerdeTest,
        )


class Client(ClientBase):
    """Synchronous client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.inout = InoutClient(self)


# External type definitions
StdNumNonZeroU32 = Annotated[int, "Rust NonZero u32 type"]
StdNumNonZeroU64 = Annotated[int, "Rust NonZero u64 type"]
StdNumNonZeroI32 = Annotated[int, "Rust NonZero i32 type"]
StdNumNonZeroI64 = Annotated[int, "Rust NonZero i64 type"]

# Rebuild models to resolve forward references
try:
    ReflectapiDemoTestsSerdeTest.model_rebuild()
    ReflectapiDemoTestsSerdeV1.model_rebuild()
    ReflectapiDemoTestsSerdeV2.model_rebuild()
except AttributeError:
    # Some types may not have model_rebuild method
    pass


# Factory classes (generated after model rebuild to avoid forward references)
class ReflectapiDemoTestsSerdeV2Factory:
    """Factory class for creating ReflectapiDemoTestsSerdeV2 variants with ergonomic syntax.

    ReflectapiDemoTestsSerdeV2 variants
    """

    @staticmethod
    def c(c) -> ReflectapiDemoTestsSerdeV2C:
        """Creates the 'C' variant of the ReflectapiDemoTestsSerdeV2 enum."""
        return ReflectapiDemoTestsSerdeV2C(c=c)

    @staticmethod
    def d(d) -> ReflectapiDemoTestsSerdeV2D:
        """Creates the 'D' variant of the ReflectapiDemoTestsSerdeV2 enum."""
        return ReflectapiDemoTestsSerdeV2D(d=d)


class ReflectapiDemoTestsSerdeV1Factory:
    """Factory class for creating ReflectapiDemoTestsSerdeV1 variants with ergonomic syntax.

    ReflectapiDemoTestsSerdeV1 variants
    """

    @staticmethod
    def a(a) -> ReflectapiDemoTestsSerdeV1A:
        """Creates the 'A' variant of the ReflectapiDemoTestsSerdeV1 enum."""
        return ReflectapiDemoTestsSerdeV1A(a=a)

    @staticmethod
    def b(b) -> ReflectapiDemoTestsSerdeV1B:
        """Creates the 'B' variant of the ReflectapiDemoTestsSerdeV1 enum."""
        return ReflectapiDemoTestsSerdeV1B(b=b)


class ReflectapiDemoTestsSerdeTestFactory:
    """Factory class for creating ReflectapiDemoTestsSerdeTest variants with ergonomic syntax.

    ReflectapiDemoTestsSerdeTest variants
    """

    @staticmethod
    def v1(field_0) -> ReflectapiDemoTestsSerdeTestV1:
        """Creates the 'v1' variant of the ReflectapiDemoTestsSerdeTest enum."""
        return ReflectapiDemoTestsSerdeTestV1(field_0=field_0)

    @staticmethod
    def v2(field_0) -> ReflectapiDemoTestsSerdeTestV2:
        """Creates the 'v2' variant of the ReflectapiDemoTestsSerdeTest enum."""
        return ReflectapiDemoTestsSerdeTestV2(field_0=field_0)


# Testing utilities


def create_reflectapidemotestsserdetest_response(
    value: ReflectapiDemoTestsSerdeTest,
) -> ApiResponse[ReflectapiDemoTestsSerdeTest]:
    """Create a mock ApiResponse for ReflectapiDemoTestsSerdeTest."""
    return create_api_response(value)


def create_reflectapidemotestsserdev1_response(
    value: ReflectapiDemoTestsSerdeV1,
) -> ApiResponse[ReflectapiDemoTestsSerdeV1]:
    """Create a mock ApiResponse for ReflectapiDemoTestsSerdeV1."""
    return create_api_response(value)


def create_reflectapidemotestsserdev2_response(
    value: ReflectapiDemoTestsSerdeV2,
) -> ApiResponse[ReflectapiDemoTestsSerdeV2]:
    """Create a mock ApiResponse for ReflectapiDemoTestsSerdeV2."""
    return create_api_response(value)


def create_mock_client() -> MockClient:
    """Create a mock client for testing."""
    return MockClient()
