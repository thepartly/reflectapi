---
source: reflectapi-demo/src/tests/serde.rs
expression: "super::into_rust_code::<Enum>()"
---
// DO NOT MODIFY THIS FILE MANUALLY
// This file was generated by reflectapi-cli
//
// Schema name:
//

#![allow(non_camel_case_types)]
#![allow(dead_code)]

pub use interface::Interface;

pub mod interface {

    #[derive(Debug)]
    pub struct Interface<C: super::Client + Clone> {
        client: C,
        base_url: std::string::String,
    }

    impl<C: super::Client + Clone> Interface<C> {
        pub fn new(client: C, base_url: std::string::String) -> Self {
            Self { client, base_url }
        }
        pub async fn inout_test(
            &self,
            input: super::types::reflectapi_demo::tests::serde::Enum,
            headers: reflectapi::Empty,
        ) -> Result<
            super::types::reflectapi_demo::tests::serde::Enum,
            super::Error<reflectapi::Empty, C::Error>,
        > {
            super::__request_impl(&self.client, &self.base_url, "/inout_test", input, headers).await
        }
    }
}
pub mod types {

    pub mod reflectapi_demo {
        pub mod tests {
            pub mod serde {

                #[derive(Debug, serde::Serialize, serde::Deserialize)]
                #[serde(tag = "type")]
                pub enum Enum {
                    #[serde(rename = "a")]
                    A(super::super::super::reflectapi_demo::tests::serde::Strukt1),
                    #[serde(rename = "b")]
                    B(super::super::super::reflectapi_demo::tests::serde::Strukt2),
                }

                #[derive(Debug, serde::Serialize, serde::Deserialize)]
                pub struct Strukt1 {
                    pub a: u8,
                    pub b: u16,
                }

                #[derive(Debug, serde::Serialize, serde::Deserialize)]
                pub struct Strukt2 {
                    pub c: u32,
                    pub d: u64,
                }
            }
        }
    }
}
