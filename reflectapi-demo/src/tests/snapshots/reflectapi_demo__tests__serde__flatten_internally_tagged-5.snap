---
source: reflectapi-demo/src/tests/serde.rs
expression: "super :: into_python_code :: < Test > ()"
snapshot_kind: text
---
'''
Generated Python client for api_client.

DO NOT MODIFY THIS FILE MANUALLY.
This file is automatically generated by ReflectAPI.
'''

from __future__ import annotations


# Standard library imports
from enum import Enum
from typing import Annotated, Any, Generic, Literal, Optional, TypeVar, Union

# Third-party imports
from pydantic import BaseModel, ConfigDict, Field, RootModel

# Runtime imports
from reflectapi_runtime import AsyncClientBase, ClientBase, ApiResponse
from reflectapi_runtime import ReflectapiEmpty
from reflectapi_runtime import ReflectapiInfallible
from reflectapi_runtime.testing import MockClient, create_api_response


# Type variables for generic types


Additional = TypeVar("Additional")

Payload = TypeVar("Payload")


class ReflectapiDemoTestsSerdeS(BaseModel, Generic[Payload, Additional]):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)


class ReflectapiDemoTestsSerdeA(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    a: int


class ReflectapiDemoTestsSerdeB(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    b: int


class ReflectapiDemoTestsSerdeTestS(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    type: Literal['S'] = "S"
    payload: Annotated[Any, "External type: Payload"]
    additional: Annotated[Any, "External type: Additional"]


class ReflectapiDemoTestsSerdeTest(RootModel):
    root: Annotated[Union[ReflectapiDemoTestsSerdeTestS], Field(discriminator='type')]


class AsyncInoutClient:
    """Async client for inout operations."""

    def __init__(self, client: AsyncClientBase) -> None:
        self._client = client


    async def test(
        self,
        data: Optional[ReflectapiDemoTestsSerdeTest] = None,
    ) -> ApiResponse[ReflectapiDemoTestsSerdeTest]:
        """

        Args:
            data: Request data for the test operation.

        Returns:
            ApiResponse[ReflectapiDemoTestsSerdeTest]: Response containing ReflectapiDemoTestsSerdeTest data
        """
        path = "/inout_test"

        params: dict[str, Any] = {}

        return await self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            response_model=ReflectapiDemoTestsSerdeTest,
)


class AsyncClient(AsyncClientBase):
    """Async client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.inout = AsyncInoutClient(self)


class InoutClient:
    """Synchronous client for inout operations."""

    def __init__(self, client: ClientBase) -> None:
        self._client = client


    def test(
        self,
        data: Optional[ReflectapiDemoTestsSerdeTest] = None,
    ) -> ApiResponse[ReflectapiDemoTestsSerdeTest]:
        """

        Args:
            data: Request data for the test operation.

        Returns:
            ApiResponse[ReflectapiDemoTestsSerdeTest]: Response containing ReflectapiDemoTestsSerdeTest data
        """
        path = "/inout_test"

        params: dict[str, Any] = {}

        return self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            response_model=ReflectapiDemoTestsSerdeTest,
)


class Client(ClientBase):
    """Synchronous client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.inout = InoutClient(self)


# External type definitions
StdNumNonZeroU32 = Annotated[int, "Rust NonZero u32 type"]
StdNumNonZeroU64 = Annotated[int, "Rust NonZero u64 type"]
StdNumNonZeroI32 = Annotated[int, "Rust NonZero i32 type"]
StdNumNonZeroI64 = Annotated[int, "Rust NonZero i64 type"]

# Rebuild models to resolve forward references
try:
    ReflectapiDemoTestsSerdeA.model_rebuild()
    ReflectapiDemoTestsSerdeB.model_rebuild()
    ReflectapiDemoTestsSerdeS.model_rebuild()
    ReflectapiDemoTestsSerdeTest.model_rebuild()
except AttributeError:
    # Some types may not have model_rebuild method
    pass

# Factory classes (generated after model rebuild to avoid forward references)
class ReflectapiDemoTestsSerdeTestFactory:
    '''Factory class for creating ReflectapiDemoTestsSerdeTest variants with ergonomic syntax.

    ReflectapiDemoTestsSerdeTest variants
    '''

    @staticmethod
    def s(field_0) -> ReflectapiDemoTestsSerdeTestS:
        '''Creates the 'S' variant of the ReflectapiDemoTestsSerdeTest enum.'''
        return ReflectapiDemoTestsSerdeTestS(field_0=field_0)


# Testing utilities


def create_reflectapidemotestsserdea_response(value: ReflectapiDemoTestsSerdeA) -> ApiResponse[ReflectapiDemoTestsSerdeA]:
    """Create a mock ApiResponse for ReflectapiDemoTestsSerdeA."""
    return create_api_response(value)


def create_reflectapidemotestsserdeb_response(value: ReflectapiDemoTestsSerdeB) -> ApiResponse[ReflectapiDemoTestsSerdeB]:
    """Create a mock ApiResponse for ReflectapiDemoTestsSerdeB."""
    return create_api_response(value)


def create_reflectapidemotestsserdes_response(value: ReflectapiDemoTestsSerdeS) -> ApiResponse[ReflectapiDemoTestsSerdeS]:
    """Create a mock ApiResponse for ReflectapiDemoTestsSerdeS."""
    return create_api_response(value)


def create_reflectapidemotestsserdetest_response(value: ReflectapiDemoTestsSerdeTest) -> ApiResponse[ReflectapiDemoTestsSerdeTest]:
    """Create a mock ApiResponse for ReflectapiDemoTestsSerdeTest."""
    return create_api_response(value)


def create_mock_client() -> MockClient:
    """Create a mock client for testing."""
    return MockClient()
