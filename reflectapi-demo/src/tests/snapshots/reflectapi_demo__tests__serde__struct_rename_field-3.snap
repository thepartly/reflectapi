---
source: reflectapi-demo/src/tests/serde.rs
expression: "super::into_rust_code::<TestStructRenameField>()"
---
// DO NOT MODIFY THIS FILE MANUALLY
// This file was generated by reflectapi-cli
//
// Schema name: 
// 

#![allow(non_camel_case_types)]
#![allow(dead_code)]

pub use interface::Interface;

pub mod interface {

#[derive(Debug)]
pub struct Interface<E, C: super::Client<E> + Clone> {
    client: C,
    base_url: std::string::String,
    marker: std::marker::PhantomData<E>,
}

impl<E, C: super::Client<E> + Clone> Interface<E, C> {
    pub fn new(client: C, base_url: std::string::String) -> Self {
        Self {
            client,
            base_url,
            marker: std::marker::PhantomData,
        }
    }
    pub async fn (&self, input: super::types::reflectapi_demo::tests::serde::input::TestStructRenameField, headers: reflectapi::Empty)
    -> Result<super::types::reflectapi_demo::tests::serde::output::TestStructRenameField, super::Error<reflectapi::Empty, E>> {
        super::__request_impl(&self.client, &self.base_url, "/", input, headers).await
    }
}

}

pub trait Client<E> {
    fn request(
        &self,
        path: &str,
        body: bytes::Bytes,
        headers: std::collections::HashMap<String, String>,
    ) -> impl std::future::Future<Output = Result<(http::StatusCode, bytes::Bytes), E>>;
}

pub enum Error<AE, NE> {
    Application(AE),
    Network(NE),
    Protocol {
        info: String,
        stage: ProtocolErrorStage,
    },
    Server(http::StatusCode, bytes::Bytes),
}

pub enum ProtocolErrorStage {
    SerializeRequestBody,
    SerializeRequestHeaders,
    DeserializeResponseBody(bytes::Bytes),
    DeserializeResponseError(http::StatusCode, bytes::Bytes),
}

#[cfg(feature = "reqwest")]
impl Client<reqwest::Error> for reqwest::Client {
    async fn request(
        &self,
        path: &str,
        body: bytes::Bytes,
        headers: std::collections::HashMap<String, String>,
    ) -> Result<(http::StatusCode, bytes::Bytes), reqwest::Error> {
        let mut request = self.post(path);
        for (k, v) in headers {
            request = request.header(k, v);
        }
        let response = request.body(body).send().await;
        let response = match response {
            Ok(response) => response,
            Err(e) => return Err(e),
        };
        let status = response.status();
        let body = response.bytes().await;
        let body = match body {
            Ok(body) => body,
            Err(e) => return Err(e),
        };
        Ok((status, body))
    }
}

pub mod types {



pub mod reflectapi_demo {
pub mod tests {
pub mod serde {
pub mod input {

#[derive(Debug, serde::Serialize)]
pub struct TestStructRenameField {
    #[serde(rename = "fieldName")]
    pub field_name: u8,
}

}
pub mod output {

#[derive(Debug, serde::Deserialize)]
pub struct TestStructRenameField {
    pub field_name: u8,
}

}

}

}

}

}

async fn __request_impl<C, NE, I, H, O, E>(
    client: &C,
    base_url: &str,
    path: &str,
    body: I,
    headers: H,
) -> Result<O, Error<E, NE>>
where
    C: Client<NE>,
    I: serde::Serialize,
    H: serde::Serialize,
    O: serde::de::DeserializeOwned,
    E: serde::de::DeserializeOwned,
{
    let body = serde_json::to_vec(&body).map_err(|e| Error::Protocol {
        info: e.to_string(),
        stage: ProtocolErrorStage::SerializeRequestBody,
    })?;
    let body = bytes::Bytes::from(body);
    let headers = serde_json::to_value(&headers).map_err(|e| Error::Protocol {
        info: e.to_string(),
        stage: ProtocolErrorStage::SerializeRequestHeaders,
    })?;

    let mut headers_serialized = std::collections::HashMap::new();
    match headers {
        serde_json::Value::Object(headers) => {
            for (k, v) in headers.into_iter() {
                let v_str = match v {
                    serde_json::Value::String(v) => v,
                    v => v.to_string(),
                };
                headers_serialized.insert(k, v_str);
            }
        }
        serde_json::Value::Null => {}
        _ => {
            return Err(Error::Protocol {
                info: "Headers must be an object".to_string(),
                stage: ProtocolErrorStage::SerializeRequestHeaders,
            });
        }
    }
    let (status, body) = client
        .request(&format!("{}{}", base_url, path), body, headers_serialized)
        .await
        .map_err(Error::Network)?;
    if status.is_success() {
        let output = serde_json::from_slice(&body).map_err(|e| Error::Protocol {
            info: e.to_string(),
            stage: ProtocolErrorStage::DeserializeResponseBody(body),
        })?;
        return Ok(output)
    }
    match serde_json::from_slice::<E>(&body) {
        Ok(error) => Err(Error::Application(error)),
        Err(e) if status.is_client_error() => Err(Error::Protocol {
            info: e.to_string(),
            stage: ProtocolErrorStage::DeserializeResponseError(status, body),
        }),
        Err(_) => Err(Error::Server(status, body)),
    }
}
