---
source: reflectapi-demo/src/tests/serde.rs
expression: "super :: into_python_code :: < TestEnumTagContentRenameAll > ()"
---
"""
Generated Python client for api_client.

DO NOT MODIFY THIS FILE MANUALLY.
This file is automatically generated by ReflectAPI.
"""

from __future__ import annotations


# Standard library imports
from enum import Enum
from typing import Annotated, Any, Generic, Optional, TypeVar, Union

# Third-party imports
from pydantic import BaseModel, ConfigDict

# Runtime imports
from reflectapi_runtime import AsyncClientBase, ClientBase, ApiResponse
from reflectapi_runtime import ReflectapiEmpty
from reflectapi_runtime import ReflectapiInfallible
from reflectapi_runtime.testing import MockClient, create_api_response


class ReflectapiDemoTestsSerdeTestEnumTagContentRenameAllVariant1Variant(BaseModel):
    """variant1 variant"""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    field_name: int


class ReflectapiDemoTestsSerdeTestEnumTagContentRenameAllVariant2Variant(BaseModel):
    """variant2 variant"""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    field_0: int


# Adjacently tagged enum using RootModel
ReflectapiDemoTestsSerdeTestEnumTagContentRenameAllVariants = Union[
    ReflectapiDemoTestsSerdeTestEnumTagContentRenameAllVariant1Variant,
    ReflectapiDemoTestsSerdeTestEnumTagContentRenameAllVariant2Variant,
]


class ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll(
    RootModel[ReflectapiDemoTestsSerdeTestEnumTagContentRenameAllVariants]
):
    """Adjacently tagged enum"""

    @model_validator(mode="before")
    @classmethod
    def _validate_adjacently_tagged(cls, data):
        # Handle direct variant instances
        if isinstance(
            data,
            (
                ReflectapiDemoTestsSerdeTestEnumTagContentRenameAllVariant1Variant,
                ReflectapiDemoTestsSerdeTestEnumTagContentRenameAllVariant2Variant,
            ),
        ):
            return data
        if isinstance(data, dict):
            tag = data.get("type")
            content = data.get("content")
            if tag is None:
                raise ValueError("Missing tag field 'type'")
            if content is None and tag not in ():
                raise ValueError(
                    "Missing content field 'content' for tag: {}".format(tag)
                )
            # Dispatch based on tag
            if tag == "variant1":
                return (
                    ReflectapiDemoTestsSerdeTestEnumTagContentRenameAllVariant1Variant(
                        **content
                    )
                )
            if tag == "variant2":
                return (
                    ReflectapiDemoTestsSerdeTestEnumTagContentRenameAllVariant2Variant(
                        field_0=content
                    )
                )
        raise ValueError(
            "Unknown variant for ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll: {}".format(
                data
            )
        )

    @model_serializer
    def _serialize_adjacently_tagged(self):
        if isinstance(
            self.root,
            ReflectapiDemoTestsSerdeTestEnumTagContentRenameAllVariant1Variant,
        ):
            return {
                "type": "variant1",
                "content": self.root.model_dump(exclude_none=True),
            }
        if isinstance(
            self.root,
            ReflectapiDemoTestsSerdeTestEnumTagContentRenameAllVariant2Variant,
        ):
            return {"type": "variant2", "content": self.root.field_0}
        raise ValueError(
            f"Cannot serialize ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll variant: {type(self.root)}"
        )


class AsyncInoutClient:
    """Async client for inout operations."""

    def __init__(self, client: AsyncClientBase) -> None:
        self._client = client

    async def test(
        self,
        data: Optional[ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll] = None,
    ) -> ApiResponse[ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll]:
        """

        Args:
            data: Request data for the test operation.

        Returns:
            ApiResponse[ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll]: Response containing ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll data
        """
        path = "/inout_test"

        params: dict[str, Any] = {}

        return await self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            response_model=ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll,
        )


class AsyncClient(AsyncClientBase):
    """Async client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.inout = AsyncInoutClient(self)


class InoutClient:
    """Synchronous client for inout operations."""

    def __init__(self, client: ClientBase) -> None:
        self._client = client

    def test(
        self,
        data: Optional[ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll] = None,
    ) -> ApiResponse[ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll]:
        """

        Args:
            data: Request data for the test operation.

        Returns:
            ApiResponse[ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll]: Response containing ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll data
        """
        path = "/inout_test"

        params: dict[str, Any] = {}

        return self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            response_model=ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll,
        )


class Client(ClientBase):
    """Synchronous client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.inout = InoutClient(self)


# External type definitions
StdNumNonZeroU32 = Annotated[int, "Rust NonZero u32 type"]
StdNumNonZeroU64 = Annotated[int, "Rust NonZero u64 type"]
StdNumNonZeroI32 = Annotated[int, "Rust NonZero i32 type"]
StdNumNonZeroI64 = Annotated[int, "Rust NonZero i64 type"]

# Rebuild models to resolve forward references
try:
    ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll.model_rebuild()
except AttributeError:
    # Some types may not have model_rebuild method
    pass


# Factory classes (generated after model rebuild to avoid forward references)
class ReflectapiDemoTestsSerdeTestEnumTagContentRenameAllFactory:
    """Factory class for creating ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll variants with ergonomic syntax.

    ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll variants
    """

    @staticmethod
    def variant1(field_name) -> ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll:
        """Creates the 'variant1' variant of the ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll enum."""
        return ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll(
            ReflectapiDemoTestsSerdeTestEnumTagContentRenameAllVariant1Variant(
                field_name=field_name
            )
        )

    @staticmethod
    def variant2(field_0) -> ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll:
        """Creates the 'variant2' variant of the ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll enum."""
        return ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll(
            ReflectapiDemoTestsSerdeTestEnumTagContentRenameAllVariant2Variant(
                field_0=field_0
            )
        )


# Testing utilities


def create_reflectapidemotestsserdetestenumtagcontentrenameall_response(
    value: ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll,
) -> ApiResponse[ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll]:
    """Create a mock ApiResponse for ReflectapiDemoTestsSerdeTestEnumTagContentRenameAll."""
    return create_api_response(value)


def create_mock_client() -> MockClient:
    """Create a mock client for testing."""
    return MockClient()
