{
  "id": {
    "kind": "Struct",
    "path": [
      "Schema"
    ],
    "disambiguator": 0
  },
  "name": "Demo application",
  "description": "This is a demo application",
  "functions": [
    {
      "id": {
        "kind": "Endpoint",
        "path": [
          "health.check"
        ],
        "disambiguator": 0
      },
      "name": "health.check",
      "path": "",
      "description": "Check the health of the service",
      "serialization": [
        "json",
        "msgpack"
      ],
      "readonly": true,
      "tags": [
        "internal"
      ]
    },
    {
      "id": {
        "kind": "Endpoint",
        "path": [
          "pets.list"
        ],
        "disambiguator": 0
      },
      "name": "pets.list",
      "path": "",
      "description": "List available pets",
      "input_type": {
        "name": "myapi::proto::PetsListRequest"
      },
      "input_headers": {
        "name": "myapi::proto::Headers"
      },
      "output_type": {
        "name": "myapi::proto::Paginated",
        "arguments": [
          {
            "name": "myapi::model::output::Pet"
          }
        ]
      },
      "error_type": {
        "name": "myapi::proto::PetsListError"
      },
      "serialization": [
        "json",
        "msgpack"
      ],
      "readonly": true
    },
    {
      "id": {
        "kind": "Endpoint",
        "path": [
          "pets.create"
        ],
        "disambiguator": 0
      },
      "name": "pets.create",
      "path": "",
      "description": "Create a new pet",
      "input_type": {
        "name": "myapi::proto::PetsCreateRequest"
      },
      "input_headers": {
        "name": "myapi::proto::Headers"
      },
      "error_type": {
        "name": "myapi::proto::PetsCreateError"
      },
      "serialization": [
        "json",
        "msgpack"
      ]
    },
    {
      "id": {
        "kind": "Endpoint",
        "path": [
          "pets.update"
        ],
        "disambiguator": 0
      },
      "name": "pets.update",
      "path": "",
      "description": "Update an existing pet",
      "input_type": {
        "name": "myapi::proto::PetsUpdateRequest"
      },
      "input_headers": {
        "name": "myapi::proto::Headers"
      },
      "error_type": {
        "name": "myapi::proto::PetsUpdateError"
      },
      "serialization": [
        "json",
        "msgpack"
      ]
    },
    {
      "id": {
        "kind": "Endpoint",
        "path": [
          "pets.remove"
        ],
        "disambiguator": 0
      },
      "name": "pets.remove",
      "path": "",
      "description": "Remove an existing pet",
      "input_type": {
        "name": "myapi::proto::PetsRemoveRequest"
      },
      "input_headers": {
        "name": "myapi::proto::Headers"
      },
      "error_type": {
        "name": "myapi::proto::PetsRemoveError"
      },
      "serialization": [
        "json",
        "msgpack"
      ]
    },
    {
      "id": {
        "kind": "Endpoint",
        "path": [
          "pets.delete"
        ],
        "disambiguator": 0
      },
      "name": "pets.delete",
      "path": "",
      "description": "Remove an existing pet",
      "deprecation_note": "Use pets.remove instead",
      "input_type": {
        "name": "myapi::proto::PetsRemoveRequest"
      },
      "input_headers": {
        "name": "myapi::proto::Headers"
      },
      "error_type": {
        "name": "myapi::proto::PetsRemoveError"
      },
      "serialization": [
        "json",
        "msgpack"
      ]
    },
    {
      "id": {
        "kind": "Endpoint",
        "path": [
          "pets.get-first"
        ],
        "disambiguator": 0
      },
      "name": "pets.get-first",
      "path": "",
      "description": "Fetch first pet, if any exists",
      "input_headers": {
        "name": "myapi::proto::Headers"
      },
      "output_type": {
        "name": "std::option::Option",
        "arguments": [
          {
            "name": "myapi::model::output::Pet"
          }
        ]
      },
      "error_type": {
        "name": "myapi::proto::UnauthorizedError"
      },
      "serialization": [
        "json",
        "msgpack"
      ]
    }
  ],
  "input_types": {
    "types": [
      {
        "kind": "primitive",
        "id": {
          "kind": "Primitive",
          "path": [
            "chrono::DateTime"
          ],
          "disambiguator": 0
        },
        "name": "chrono::DateTime",
        "description": "DateTime at a given timezone (RFC3339 format)",
        "parameters": [
          {
            "name": "Tz"
          }
        ],
        "fallback": {
          "name": "std::string::String"
        }
      },
      {
        "kind": "primitive",
        "id": {
          "kind": "Primitive",
          "path": [
            "f64"
          ],
          "disambiguator": 0
        },
        "name": "f64",
        "description": "64-bit floating point number"
      },
      {
        "kind": "enum",
        "id": {
          "kind": "Enum",
          "path": [
            "Behavior"
          ],
          "disambiguator": 0
        },
        "name": "myapi::model::Behavior",
        "variants": [
          {
            "id": {
              "kind": "Variant",
              "path": [
                "Calm"
              ],
              "disambiguator": 0
            },
            "name": "Calm",
            "fields": "none"
          },
          {
            "id": {
              "kind": "Variant",
              "path": [
                "Aggressive"
              ],
              "disambiguator": 0
            },
            "name": "Aggressive",
            "fields": {
              "unnamed": [
                {
                  "id": {
                    "kind": "Field",
                    "path": [
                      "0"
                    ],
                    "disambiguator": 0
                  },
                  "name": "0",
                  "description": "aggressiveness level",
                  "type": {
                    "name": "f64"
                  },
                  "required": true
                },
                {
                  "id": {
                    "kind": "Field",
                    "path": [
                      "1"
                    ],
                    "disambiguator": 0
                  },
                  "name": "1",
                  "description": "some notes",
                  "type": {
                    "name": "std::string::String"
                  },
                  "required": true
                }
              ]
            }
          },
          {
            "id": {
              "kind": "Variant",
              "path": [
                "Other"
              ],
              "disambiguator": 0
            },
            "name": "Other",
            "fields": {
              "named": [
                {
                  "id": {
                    "kind": "Field",
                    "path": [
                      "description"
                    ],
                    "disambiguator": 0
                  },
                  "name": "description",
                  "description": "Custom provided description of a behavior",
                  "type": {
                    "name": "std::string::String"
                  },
                  "required": true
                },
                {
                  "id": {
                    "kind": "Field",
                    "path": [
                      "notes"
                    ],
                    "disambiguator": 0
                  },
                  "name": "notes",
                  "description": "Additional notes\nUp to a user to put free text here",
                  "type": {
                    "name": "std::string::String"
                  }
                }
              ]
            }
          }
        ]
      },
      {
        "kind": "enum",
        "id": {
          "kind": "Enum",
          "path": [
            "Kind"
          ],
          "disambiguator": 0
        },
        "name": "myapi::model::Kind",
        "representation": {
          "internal": {
            "tag": "type"
          }
        },
        "variants": [
          {
            "id": {
              "kind": "Variant",
              "path": [
                "dog"
              ],
              "disambiguator": 0
            },
            "name": "dog",
            "description": "A dog",
            "fields": {
              "named": [
                {
                  "id": {
                    "kind": "Field",
                    "path": [
                      "breed"
                    ],
                    "disambiguator": 0
                  },
                  "name": "breed",
                  "description": "breed of the dog",
                  "type": {
                    "name": "std::string::String"
                  },
                  "required": true
                }
              ]
            }
          },
          {
            "id": {
              "kind": "Variant",
              "path": [
                "cat"
              ],
              "disambiguator": 0
            },
            "name": "cat",
            "description": "A cat",
            "fields": {
              "named": [
                {
                  "id": {
                    "kind": "Field",
                    "path": [
                      "lives"
                    ],
                    "disambiguator": 0
                  },
                  "name": "lives",
                  "description": "lives left",
                  "type": {
                    "name": "u8"
                  },
                  "required": true
                }
              ]
            }
          }
        ]
      },
      {
        "kind": "struct",
        "id": {
          "kind": "Struct",
          "path": [
            "Pet"
          ],
          "disambiguator": 0
        },
        "name": "myapi::model::input::Pet",
        "fields": {
          "named": [
            {
              "id": {
                "kind": "Field",
                "path": [
                  "name"
                ],
                "disambiguator": 0
              },
              "name": "name",
              "description": "identity",
              "type": {
                "name": "std::string::String"
              },
              "required": true
            },
            {
              "id": {
                "kind": "Field",
                "path": [
                  "kind"
                ],
                "disambiguator": 0
              },
              "name": "kind",
              "description": "kind of pet",
              "type": {
                "name": "myapi::model::Kind"
              },
              "required": true
            },
            {
              "id": {
                "kind": "Field",
                "path": [
                  "age"
                ],
                "disambiguator": 0
              },
              "name": "age",
              "description": "age of the pet",
              "deprecation_note": "test deprecation",
              "type": {
                "name": "std::option::Option",
                "arguments": [
                  {
                    "name": "u8"
                  }
                ]
              }
            },
            {
              "id": {
                "kind": "Field",
                "path": [
                  "updated_at"
                ],
                "disambiguator": 0
              },
              "name": "updated_at",
              "type": {
                "name": "chrono::DateTime",
                "arguments": [
                  {
                    "name": "chrono::Utc"
                  }
                ]
              }
            },
            {
              "id": {
                "kind": "Field",
                "path": [
                  "behaviors"
                ],
                "disambiguator": 0
              },
              "name": "behaviors",
              "description": "behaviors of the pet",
              "type": {
                "name": "std::vec::Vec",
                "arguments": [
                  {
                    "name": "myapi::model::Behavior"
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "kind": "struct",
        "id": {
          "kind": "Struct",
          "path": [
            "Headers"
          ],
          "disambiguator": 0
        },
        "name": "myapi::proto::Headers",
        "fields": {
          "named": [
            {
              "id": {
                "kind": "Field",
                "path": [
                  "authorization"
                ],
                "disambiguator": 0
              },
              "name": "authorization",
              "type": {
                "name": "std::string::String"
              },
              "required": true
            }
          ]
        }
      },
      {
        "kind": "struct",
        "id": {
          "kind": "Struct",
          "path": [
            "PetsCreateRequest"
          ],
          "disambiguator": 0
        },
        "name": "myapi::proto::PetsCreateRequest",
        "fields": {
          "unnamed": [
            {
              "id": {
                "kind": "Field",
                "path": [
                  "0"
                ],
                "disambiguator": 0
              },
              "name": "0",
              "type": {
                "name": "myapi::model::input::Pet"
              },
              "required": true
            }
          ]
        }
      },
      {
        "kind": "struct",
        "id": {
          "kind": "Struct",
          "path": [
            "PetsListRequest"
          ],
          "disambiguator": 0
        },
        "name": "myapi::proto::PetsListRequest",
        "fields": {
          "named": [
            {
              "id": {
                "kind": "Field",
                "path": [
                  "limit"
                ],
                "disambiguator": 0
              },
              "name": "limit",
              "type": {
                "name": "std::option::Option",
                "arguments": [
                  {
                    "name": "u8"
                  }
                ]
              }
            },
            {
              "id": {
                "kind": "Field",
                "path": [
                  "cursor"
                ],
                "disambiguator": 0
              },
              "name": "cursor",
              "type": {
                "name": "std::option::Option",
                "arguments": [
                  {
                    "name": "std::string::String"
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "kind": "struct",
        "id": {
          "kind": "Struct",
          "path": [
            "PetsRemoveRequest"
          ],
          "disambiguator": 0
        },
        "name": "myapi::proto::PetsRemoveRequest",
        "fields": {
          "named": [
            {
              "id": {
                "kind": "Field",
                "path": [
                  "name"
                ],
                "disambiguator": 0
              },
              "name": "name",
              "description": "identity",
              "type": {
                "name": "std::string::String"
              },
              "required": true
            }
          ]
        }
      },
      {
        "kind": "struct",
        "id": {
          "kind": "Struct",
          "path": [
            "PetsUpdateRequest"
          ],
          "disambiguator": 0
        },
        "name": "myapi::proto::PetsUpdateRequest",
        "fields": {
          "named": [
            {
              "id": {
                "kind": "Field",
                "path": [
                  "name"
                ],
                "disambiguator": 0
              },
              "name": "name",
              "description": "identity",
              "type": {
                "name": "std::string::String"
              },
              "required": true
            },
            {
              "id": {
                "kind": "Field",
                "path": [
                  "kind"
                ],
                "disambiguator": 0
              },
              "name": "kind",
              "description": "kind of pet, non nullable in the model",
              "type": {
                "name": "std::option::Option",
                "arguments": [
                  {
                    "name": "myapi::model::Kind"
                  }
                ]
              }
            },
            {
              "id": {
                "kind": "Field",
                "path": [
                  "age"
                ],
                "disambiguator": 0
              },
              "name": "age",
              "description": "age of the pet, nullable in the model",
              "type": {
                "name": "reflectapi::Option",
                "arguments": [
                  {
                    "name": "u8"
                  }
                ]
              }
            },
            {
              "id": {
                "kind": "Field",
                "path": [
                  "behaviors"
                ],
                "disambiguator": 0
              },
              "name": "behaviors",
              "description": "behaviors of the pet, nullable in the model",
              "type": {
                "name": "reflectapi::Option",
                "arguments": [
                  {
                    "name": "std::vec::Vec",
                    "arguments": [
                      {
                        "name": "myapi::model::Behavior"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "kind": "struct",
        "id": {
          "kind": "Struct",
          "path": [
            "reflectapi::Empty"
          ],
          "disambiguator": 0
        },
        "name": "reflectapi::Empty",
        "description": "Struct object with no fields",
        "fields": "none"
      },
      {
        "kind": "enum",
        "id": {
          "kind": "Enum",
          "path": [
            "reflectapi::Option"
          ],
          "disambiguator": 0
        },
        "name": "reflectapi::Option",
        "description": "Undefinable Option type",
        "parameters": [
          {
            "name": "T"
          }
        ],
        "representation": "none",
        "variants": [
          {
            "id": {
              "kind": "Variant",
              "path": [
                "Undefined"
              ],
              "disambiguator": 0
            },
            "name": "Undefined",
            "description": "The value is missing, i.e. undefined in JavaScript",
            "fields": "none"
          },
          {
            "id": {
              "kind": "Variant",
              "path": [
                "None"
              ],
              "disambiguator": 0
            },
            "name": "None",
            "description": "The value is provided but set to none, i.e. null in JavaScript",
            "fields": "none"
          },
          {
            "id": {
              "kind": "Variant",
              "path": [
                "Some"
              ],
              "disambiguator": 0
            },
            "name": "Some",
            "description": "The value is provided and set to some value",
            "fields": {
              "unnamed": [
                {
                  "id": {
                    "kind": "Field",
                    "path": [
                      "0"
                    ],
                    "disambiguator": 0
                  },
                  "name": "0",
                  "type": {
                    "name": "T"
                  }
                }
              ]
            }
          }
        ]
      },
      {
        "kind": "enum",
        "id": {
          "kind": "Enum",
          "path": [
            "std::option::Option"
          ],
          "disambiguator": 0
        },
        "name": "std::option::Option",
        "description": "Optional nullable type",
        "parameters": [
          {
            "name": "T"
          }
        ],
        "representation": "none",
        "variants": [
          {
            "id": {
              "kind": "Variant",
              "path": [
                "None"
              ],
              "disambiguator": 0
            },
            "name": "None",
            "description": "The value is not provided, i.e. null",
            "fields": "none"
          },
          {
            "id": {
              "kind": "Variant",
              "path": [
                "Some"
              ],
              "disambiguator": 0
            },
            "name": "Some",
            "description": "The value is provided and set to some value",
            "fields": {
              "unnamed": [
                {
                  "id": {
                    "kind": "Field",
                    "path": [
                      "0"
                    ],
                    "disambiguator": 0
                  },
                  "name": "0",
                  "type": {
                    "name": "T"
                  }
                }
              ]
            }
          }
        ]
      },
      {
        "kind": "primitive",
        "id": {
          "kind": "Primitive",
          "path": [
            "std::string::String"
          ],
          "disambiguator": 0
        },
        "name": "std::string::String",
        "description": "UTF-8 encoded string"
      },
      {
        "kind": "primitive",
        "id": {
          "kind": "Primitive",
          "path": [
            "std::vec::Vec"
          ],
          "disambiguator": 0
        },
        "name": "std::vec::Vec",
        "description": "Expandable array type",
        "parameters": [
          {
            "name": "T"
          }
        ]
      },
      {
        "kind": "primitive",
        "id": {
          "kind": "Primitive",
          "path": [
            "u8"
          ],
          "disambiguator": 0
        },
        "name": "u8",
        "description": "8-bit unsigned integer"
      }
    ]
  },
  "output_types": {
    "types": [
      {
        "kind": "primitive",
        "id": {
          "kind": "Primitive",
          "path": [
            "chrono::DateTime"
          ],
          "disambiguator": 0
        },
        "name": "chrono::DateTime",
        "description": "DateTime at a given timezone (RFC3339 format)",
        "parameters": [
          {
            "name": "Tz"
          }
        ],
        "fallback": {
          "name": "std::string::String"
        }
      },
      {
        "kind": "primitive",
        "id": {
          "kind": "Primitive",
          "path": [
            "f64"
          ],
          "disambiguator": 0
        },
        "name": "f64",
        "description": "64-bit floating point number"
      },
      {
        "kind": "enum",
        "id": {
          "kind": "Enum",
          "path": [
            "Behavior"
          ],
          "disambiguator": 0
        },
        "name": "myapi::model::Behavior",
        "variants": [
          {
            "id": {
              "kind": "Variant",
              "path": [
                "Calm"
              ],
              "disambiguator": 0
            },
            "name": "Calm",
            "fields": "none"
          },
          {
            "id": {
              "kind": "Variant",
              "path": [
                "Aggressive"
              ],
              "disambiguator": 0
            },
            "name": "Aggressive",
            "fields": {
              "unnamed": [
                {
                  "id": {
                    "kind": "Field",
                    "path": [
                      "0"
                    ],
                    "disambiguator": 0
                  },
                  "name": "0",
                  "description": "aggressiveness level",
                  "type": {
                    "name": "f64"
                  },
                  "required": true
                },
                {
                  "id": {
                    "kind": "Field",
                    "path": [
                      "1"
                    ],
                    "disambiguator": 0
                  },
                  "name": "1",
                  "description": "some notes",
                  "type": {
                    "name": "std::string::String"
                  },
                  "required": true
                }
              ]
            }
          },
          {
            "id": {
              "kind": "Variant",
              "path": [
                "Other"
              ],
              "disambiguator": 0
            },
            "name": "Other",
            "fields": {
              "named": [
                {
                  "id": {
                    "kind": "Field",
                    "path": [
                      "description"
                    ],
                    "disambiguator": 0
                  },
                  "name": "description",
                  "description": "Custom provided description of a behavior",
                  "type": {
                    "name": "std::string::String"
                  },
                  "required": true
                },
                {
                  "id": {
                    "kind": "Field",
                    "path": [
                      "notes"
                    ],
                    "disambiguator": 0
                  },
                  "name": "notes",
                  "description": "Additional notes\nUp to a user to put free text here",
                  "type": {
                    "name": "std::string::String"
                  }
                }
              ]
            }
          }
        ]
      },
      {
        "kind": "enum",
        "id": {
          "kind": "Enum",
          "path": [
            "Kind"
          ],
          "disambiguator": 0
        },
        "name": "myapi::model::Kind",
        "representation": {
          "internal": {
            "tag": "type"
          }
        },
        "variants": [
          {
            "id": {
              "kind": "Variant",
              "path": [
                "dog"
              ],
              "disambiguator": 0
            },
            "name": "dog",
            "description": "A dog",
            "fields": {
              "named": [
                {
                  "id": {
                    "kind": "Field",
                    "path": [
                      "breed"
                    ],
                    "disambiguator": 0
                  },
                  "name": "breed",
                  "description": "breed of the dog",
                  "type": {
                    "name": "std::string::String"
                  },
                  "required": true
                }
              ]
            }
          },
          {
            "id": {
              "kind": "Variant",
              "path": [
                "cat"
              ],
              "disambiguator": 0
            },
            "name": "cat",
            "description": "A cat",
            "fields": {
              "named": [
                {
                  "id": {
                    "kind": "Field",
                    "path": [
                      "lives"
                    ],
                    "disambiguator": 0
                  },
                  "name": "lives",
                  "description": "lives left",
                  "type": {
                    "name": "u8"
                  },
                  "required": true
                }
              ]
            }
          }
        ]
      },
      {
        "kind": "struct",
        "id": {
          "kind": "Struct",
          "path": [
            "Pet"
          ],
          "disambiguator": 0
        },
        "name": "myapi::model::output::Pet",
        "fields": {
          "named": [
            {
              "id": {
                "kind": "Field",
                "path": [
                  "name"
                ],
                "disambiguator": 0
              },
              "name": "name",
              "description": "identity",
              "type": {
                "name": "std::string::String"
              },
              "required": true
            },
            {
              "id": {
                "kind": "Field",
                "path": [
                  "kind"
                ],
                "disambiguator": 0
              },
              "name": "kind",
              "description": "kind of pet",
              "type": {
                "name": "myapi::model::Kind"
              },
              "required": true
            },
            {
              "id": {
                "kind": "Field",
                "path": [
                  "age"
                ],
                "disambiguator": 0
              },
              "name": "age",
              "description": "age of the pet",
              "deprecation_note": "test deprecation",
              "type": {
                "name": "std::option::Option",
                "arguments": [
                  {
                    "name": "u8"
                  }
                ]
              }
            },
            {
              "id": {
                "kind": "Field",
                "path": [
                  "updated_at"
                ],
                "disambiguator": 0
              },
              "name": "updated_at",
              "type": {
                "name": "chrono::DateTime",
                "arguments": [
                  {
                    "name": "chrono::Utc"
                  }
                ]
              },
              "required": true
            },
            {
              "id": {
                "kind": "Field",
                "path": [
                  "behaviors"
                ],
                "disambiguator": 0
              },
              "name": "behaviors",
              "description": "behaviors of the pet",
              "type": {
                "name": "std::vec::Vec",
                "arguments": [
                  {
                    "name": "myapi::model::Behavior"
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "kind": "struct",
        "id": {
          "kind": "Struct",
          "path": [
            "Paginated"
          ],
          "disambiguator": 0
        },
        "name": "myapi::proto::Paginated",
        "parameters": [
          {
            "name": "T"
          }
        ],
        "fields": {
          "named": [
            {
              "id": {
                "kind": "Field",
                "path": [
                  "items"
                ],
                "disambiguator": 0
              },
              "name": "items",
              "description": "slice of a collection",
              "type": {
                "name": "std::vec::Vec",
                "arguments": [
                  {
                    "name": "T"
                  }
                ]
              },
              "required": true
            },
            {
              "id": {
                "kind": "Field",
                "path": [
                  "cursor"
                ],
                "disambiguator": 0
              },
              "name": "cursor",
              "description": "cursor for getting next page",
              "type": {
                "name": "std::option::Option",
                "arguments": [
                  {
                    "name": "std::string::String"
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "kind": "enum",
        "id": {
          "kind": "Enum",
          "path": [
            "PetsCreateError"
          ],
          "disambiguator": 0
        },
        "name": "myapi::proto::PetsCreateError",
        "variants": [
          {
            "id": {
              "kind": "Variant",
              "path": [
                "Conflict"
              ],
              "disambiguator": 0
            },
            "name": "Conflict",
            "fields": "none"
          },
          {
            "id": {
              "kind": "Variant",
              "path": [
                "NotAuthorized"
              ],
              "disambiguator": 0
            },
            "name": "NotAuthorized",
            "fields": "none"
          },
          {
            "id": {
              "kind": "Variant",
              "path": [
                "InvalidIdentity"
              ],
              "disambiguator": 0
            },
            "name": "InvalidIdentity",
            "fields": {
              "named": [
                {
                  "id": {
                    "kind": "Field",
                    "path": [
                      "message"
                    ],
                    "disambiguator": 0
                  },
                  "name": "message",
                  "type": {
                    "name": "std::string::String"
                  },
                  "required": true
                }
              ]
            }
          }
        ]
      },
      {
        "kind": "enum",
        "id": {
          "kind": "Enum",
          "path": [
            "PetsListError"
          ],
          "disambiguator": 0
        },
        "name": "myapi::proto::PetsListError",
        "variants": [
          {
            "id": {
              "kind": "Variant",
              "path": [
                "InvalidCursor"
              ],
              "disambiguator": 0
            },
            "name": "InvalidCursor",
            "fields": "none"
          },
          {
            "id": {
              "kind": "Variant",
              "path": [
                "Unauthorized"
              ],
              "disambiguator": 0
            },
            "name": "Unauthorized",
            "fields": "none"
          }
        ]
      },
      {
        "kind": "enum",
        "id": {
          "kind": "Enum",
          "path": [
            "PetsRemoveError"
          ],
          "disambiguator": 0
        },
        "name": "myapi::proto::PetsRemoveError",
        "variants": [
          {
            "id": {
              "kind": "Variant",
              "path": [
                "NotFound"
              ],
              "disambiguator": 0
            },
            "name": "NotFound",
            "fields": "none"
          },
          {
            "id": {
              "kind": "Variant",
              "path": [
                "NotAuthorized"
              ],
              "disambiguator": 0
            },
            "name": "NotAuthorized",
            "fields": "none"
          }
        ]
      },
      {
        "kind": "enum",
        "id": {
          "kind": "Enum",
          "path": [
            "PetsUpdateError"
          ],
          "disambiguator": 0
        },
        "name": "myapi::proto::PetsUpdateError",
        "variants": [
          {
            "id": {
              "kind": "Variant",
              "path": [
                "NotFound"
              ],
              "disambiguator": 0
            },
            "name": "NotFound",
            "fields": "none"
          },
          {
            "id": {
              "kind": "Variant",
              "path": [
                "NotAuthorized"
              ],
              "disambiguator": 0
            },
            "name": "NotAuthorized",
            "fields": "none"
          }
        ]
      },
      {
        "kind": "struct",
        "id": {
          "kind": "Struct",
          "path": [
            "UnauthorizedError"
          ],
          "disambiguator": 0
        },
        "name": "myapi::proto::UnauthorizedError",
        "fields": {
          "unnamed": [
            {
              "id": {
                "kind": "Field",
                "path": [
                  "0"
                ],
                "disambiguator": 0
              },
              "name": "0",
              "type": {
                "name": "std::tuple::Tuple0"
              }
            }
          ]
        }
      },
      {
        "kind": "struct",
        "id": {
          "kind": "Struct",
          "path": [
            "reflectapi::Empty"
          ],
          "disambiguator": 0
        },
        "name": "reflectapi::Empty",
        "description": "Struct object with no fields",
        "fields": "none"
      },
      {
        "kind": "struct",
        "id": {
          "kind": "Struct",
          "path": [
            "reflectapi::Infallible"
          ],
          "disambiguator": 0
        },
        "name": "reflectapi::Infallible",
        "description": "Error object which is expected to be never returned",
        "fields": "none"
      },
      {
        "kind": "enum",
        "id": {
          "kind": "Enum",
          "path": [
            "std::option::Option"
          ],
          "disambiguator": 0
        },
        "name": "std::option::Option",
        "description": "Optional nullable type",
        "parameters": [
          {
            "name": "T"
          }
        ],
        "representation": "none",
        "variants": [
          {
            "id": {
              "kind": "Variant",
              "path": [
                "None"
              ],
              "disambiguator": 0
            },
            "name": "None",
            "description": "The value is not provided, i.e. null",
            "fields": "none"
          },
          {
            "id": {
              "kind": "Variant",
              "path": [
                "Some"
              ],
              "disambiguator": 0
            },
            "name": "Some",
            "description": "The value is provided and set to some value",
            "fields": {
              "unnamed": [
                {
                  "id": {
                    "kind": "Field",
                    "path": [
                      "0"
                    ],
                    "disambiguator": 0
                  },
                  "name": "0",
                  "type": {
                    "name": "T"
                  }
                }
              ]
            }
          }
        ]
      },
      {
        "kind": "primitive",
        "id": {
          "kind": "Primitive",
          "path": [
            "std::string::String"
          ],
          "disambiguator": 0
        },
        "name": "std::string::String",
        "description": "UTF-8 encoded string"
      },
      {
        "kind": "primitive",
        "id": {
          "kind": "Primitive",
          "path": [
            "std::tuple::Tuple0"
          ],
          "disambiguator": 0
        },
        "name": "std::tuple::Tuple0",
        "description": "Unit type"
      },
      {
        "kind": "primitive",
        "id": {
          "kind": "Primitive",
          "path": [
            "std::vec::Vec"
          ],
          "disambiguator": 0
        },
        "name": "std::vec::Vec",
        "description": "Expandable array type",
        "parameters": [
          {
            "name": "T"
          }
        ]
      },
      {
        "kind": "primitive",
        "id": {
          "kind": "Primitive",
          "path": [
            "u8"
          ],
          "disambiguator": 0
        },
        "name": "u8",
        "description": "8-bit unsigned integer"
      }
    ]
  }
}