"""
Generated Python client for api_client.

DO NOT MODIFY THIS FILE MANUALLY.
This file is automatically generated by `reflectapi`.
""""

from __future__ import annotations


# Standard library imports
from datetime import datetime
from enum import Enum
import warnings
from typing import Annotated, Any, Generic, Literal, Optional, TypeVar, Union

# Third-party imports
from pydantic import BaseModel, ConfigDict, Field, PrivateAttr, RootModel, model_serializer, model_validator

# Runtime imports
from reflectapi_runtime import AsyncClientBase, ClientBase, ApiResponse
from reflectapi_runtime import ReflectapiOption
from reflectapi_runtime import ReflectapiEmpty
from reflectapi_runtime import ReflectapiInfallible
from reflectapi_runtime.testing import MockClient, create_api_response


# Type variables for generic types


T = TypeVar("T")


class MyapiProtoPetsListError(str, Enum):
    """Generated enum."""


    INVALID_CURSOR = "InvalidCursor"
    UNAUTHORIZED = "Unauthorized"


class MyapiProtoPetsRemoveError(str, Enum):
    """Generated enum."""


    NOT_FOUND = "NotFound"
    NOT_AUTHORIZED = "NotAuthorized"


class MyapiProtoPetsUpdateError(str, Enum):
    """Generated enum."""


    NOT_FOUND = "NotFound"
    NOT_AUTHORIZED = "NotAuthorized"


class MyapiModelBehaviorAggressiveVariant(BaseModel):
    """Aggressive variant"""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    field_0: float
    field_1: str


class MyapiModelBehaviorOtherVariant(BaseModel):
    """Other variant"""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    description: str
    notes: str | None = None


# Externally tagged enum using RootModel
MyapiModelBehaviorVariants = Union[Literal["Calm"], MyapiModelBehaviorAggressiveVariant, MyapiModelBehaviorOtherVariant]

class MyapiModelBehavior(RootModel[MyapiModelBehaviorVariants]):
    """Externally tagged enum"""


    @model_validator(mode='before')
    @classmethod
    def _validate_externally_tagged(cls, data):
        # Handle direct variant instances (for programmatic creation)
        if isinstance(data, MyapiModelBehaviorAggressiveVariant):
            return data
        if isinstance(data, MyapiModelBehaviorOtherVariant):
            return data

        # Handle JSON data (for deserialization)
        if isinstance(data, str) and data == "Calm":
            return data

        if isinstance(data, dict):
            if len(data) != 1:
                raise ValueError("Externally tagged enum must have exactly one key")

            key, value = next(iter(data.items()))
            if key == "Aggressive":
                if isinstance(value, list):
                    return MyapiModelBehaviorAggressiveVariant(field_0=value[0], field_1=value[1])
                else:
                    raise ValueError("Expected list for tuple variant Aggressive")
            if key == "Other":
                return MyapiModelBehaviorOtherVariant(**value)

        raise ValueError(f"Unknown variant for MyapiModelBehavior: {data}")

    @model_serializer
    def _serialize_externally_tagged(self):
        if self.root == "Calm":
            return "Calm"
        if isinstance(self.root, MyapiModelBehaviorAggressiveVariant):
            return {"Aggressive": [self.root.field_0, self.root.field_1]}
        if isinstance(self.root, MyapiModelBehaviorOtherVariant):
            return {"Other": self.root.model_dump(exclude_none=True)}

        raise ValueError(f"Cannot serialize MyapiModelBehavior variant: {type(self.root)}")


class MyapiProtoHeaders(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    authorization: str


class MyapiProtoPetsCreateErrorInvalidIdentityVariant(BaseModel):
    """InvalidIdentity variant"""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    message: str


# Externally tagged enum using RootModel
MyapiProtoPetsCreateErrorVariants = Union[Literal["Conflict"], Literal["NotAuthorized"], MyapiProtoPetsCreateErrorInvalidIdentityVariant]

class MyapiProtoPetsCreateError(RootModel[MyapiProtoPetsCreateErrorVariants]):
    """Externally tagged enum"""


    @model_validator(mode='before')
    @classmethod
    def _validate_externally_tagged(cls, data):
        # Handle direct variant instances (for programmatic creation)
        if isinstance(data, MyapiProtoPetsCreateErrorInvalidIdentityVariant):
            return data

        # Handle JSON data (for deserialization)
        if isinstance(data, str) and data == "Conflict":
            return data
        if isinstance(data, str) and data == "NotAuthorized":
            return data

        if isinstance(data, dict):
            if len(data) != 1:
                raise ValueError("Externally tagged enum must have exactly one key")

            key, value = next(iter(data.items()))
            if key == "InvalidIdentity":
                return MyapiProtoPetsCreateErrorInvalidIdentityVariant(**value)

        raise ValueError(f"Unknown variant for MyapiProtoPetsCreateError: {data}")

    @model_serializer
    def _serialize_externally_tagged(self):
        if self.root == "Conflict":
            return "Conflict"
        if self.root == "NotAuthorized":
            return "NotAuthorized"
        if isinstance(self.root, MyapiProtoPetsCreateErrorInvalidIdentityVariant):
            return {"InvalidIdentity": self.root.model_dump(exclude_none=True)}

        raise ValueError(f"Cannot serialize MyapiProtoPetsCreateError variant: {type(self.root)}")


class MyapiProtoPetsRemoveRequest(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    name: str


class MyapiProtoPaginated(BaseModel, Generic[T]):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    items: list[T]
    cursor: str | None = None


class MyapiModelKindDog(BaseModel):
    """A dog"""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    type: Literal['dog'] = "dog"
    breed: str


class MyapiModelKindCat(BaseModel):
    """A cat"""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    type: Literal['cat'] = "cat"
    lives: int


class MyapiModelKind(RootModel):
    root: Annotated[Union[MyapiModelKindDog, MyapiModelKindCat], Field(discriminator='type')]


class MyapiProtoPetsListRequest(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    limit: int | None = None
    cursor: str | None = None


class MyapiModelInputPet(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    name: str
    kind: MyapiModelKind
    age: int | None = None
    updated_at: datetime | None = None
    behaviors: list[MyapiModelBehavior] | None = None


class MyapiModelOutputPet(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    name: str
    kind: MyapiModelKind
    age: int | None = None
    updated_at: datetime
    behaviors: list[MyapiModelBehavior] | None = None


class MyapiProtoPetsUpdateRequest(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    name: str
    kind: MyapiModelKind | None = None
    age: ReflectapiOption[int] = None
    behaviors: ReflectapiOption[list[MyapiModelBehavior]] = None


class AsyncHealthClient:
    """Async client for health operations."""

    def __init__(self, client: AsyncClientBase) -> None:
        self._client = client


    async def check(
        self,
    ) -> ApiResponse[Any]:
        """Check the health of the service

        Returns:
            ApiResponse[Any]: Response containing Any data
        """
        path = "/health.check"

        params: dict[str, Any] = {}

        return await self._client._make_request(
            "GET",
            path,
            params=params if params else None,
            response_model=None,
)


class AsyncPetsClient:
    """Async client for pets operations."""

    def __init__(self, client: AsyncClientBase) -> None:
        self._client = client


    async def create(
        self,
        data: Optional[MyapiModelInputPet] = None,
        headers: Optional[MyapiProtoHeaders] = None,
    ) -> ApiResponse[Any]:
        """Create a new pet

        Args:
            data: Request data for the create operation.

        Returns:
            ApiResponse[Any]: Response containing Any data
        """
        path = "/pets.create"

        params: dict[str, Any] = {}

        return await self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            headers_model=headers,
            response_model=None,
)


    async def delete(
        self,
        data: Optional[MyapiProtoPetsRemoveRequest] = None,
        headers: Optional[MyapiProtoHeaders] = None,
    ) -> ApiResponse[Any]:
        """Remove an existing pet

        Args:
            data: Request data for the delete operation.

        Returns:
            ApiResponse[Any]: Response containing Any data

        .. deprecated::
           Use pets.remove instead
        """

        warnings.warn(
            "pets_delete is deprecated: Use pets.remove instead",
            DeprecationWarning,
            stacklevel=2,
        )

        path = "/pets.delete"

        params: dict[str, Any] = {}

        return await self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            headers_model=headers,
            response_model=None,
)


    async def get_first(
        self,
        headers: Optional[MyapiProtoHeaders] = None,
    ) -> ApiResponse[MyapiModelOutputPet | None]:
        """Fetch first pet, if any exists

        Returns:
            ApiResponse[MyapiModelOutputPet | None]: Response containing MyapiModelOutputPet | None data
        """
        path = "/pets.get-first"

        params: dict[str, Any] = {}

        return await self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            headers_model=headers,
            response_model=MyapiModelOutputPet | None,
)


    async def list(
        self,
        limit: Optional[int | None] = None,
        cursor: Optional[str | None] = None,
        headers: Optional[MyapiProtoHeaders] = None,
    ) -> ApiResponse[MyapiProtoPaginated[MyapiModelOutputPet]]:
        """List available pets

        Args:
            limit: Query parameter: limit (optional)
            cursor: Query parameter: cursor (optional)

        Returns:
            ApiResponse[MyapiProtoPaginated[MyapiModelOutputPet]]: Response containing MyapiProtoPaginated[MyapiModelOutputPet] data
        """
        path = "/pets.list"

        params: dict[str, Any] = {}

        if limit is not None:
            params["limit"] = limit

        if cursor is not None:
            params["cursor"] = cursor

        return await self._client._make_request(
            "GET",
            path,
            params=params if params else None,
            headers_model=headers,
            response_model=MyapiProtoPaginated[MyapiModelOutputPet],
)


    async def remove(
        self,
        data: Optional[MyapiProtoPetsRemoveRequest] = None,
        headers: Optional[MyapiProtoHeaders] = None,
    ) -> ApiResponse[Any]:
        """Remove an existing pet

        Args:
            data: Request data for the remove operation.

        Returns:
            ApiResponse[Any]: Response containing Any data
        """
        path = "/pets.remove"

        params: dict[str, Any] = {}

        return await self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            headers_model=headers,
            response_model=None,
)


    async def update(
        self,
        data: Optional[MyapiProtoPetsUpdateRequest] = None,
        headers: Optional[MyapiProtoHeaders] = None,
    ) -> ApiResponse[Any]:
        """Update an existing pet

        Args:
            data: Request data for the update operation.

        Returns:
            ApiResponse[Any]: Response containing Any data
        """
        path = "/pets.update"

        params: dict[str, Any] = {}

        return await self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            headers_model=headers,
            response_model=None,
)


class AsyncClient(AsyncClientBase):
    """Async client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.health = AsyncHealthClient(self)

        self.pets = AsyncPetsClient(self)


class HealthClient:
    """Synchronous client for health operations."""

    def __init__(self, client: ClientBase) -> None:
        self._client = client


    def check(
        self,
    ) -> ApiResponse[Any]:
        """Check the health of the service

        Returns:
            ApiResponse[Any]: Response containing Any data
        """
        path = "/health.check"

        params: dict[str, Any] = {}

        return self._client._make_request(
            "GET",
            path,
            params=params if params else None,
            response_model=None,
)


class PetsClient:
    """Synchronous client for pets operations."""

    def __init__(self, client: ClientBase) -> None:
        self._client = client


    def create(
        self,
        data: Optional[MyapiModelInputPet] = None,
        headers: Optional[MyapiProtoHeaders] = None,
    ) -> ApiResponse[Any]:
        """Create a new pet

        Args:
            data: Request data for the create operation.

        Returns:
            ApiResponse[Any]: Response containing Any data
        """
        path = "/pets.create"

        params: dict[str, Any] = {}

        return self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            headers_model=headers,
            response_model=None,
)


    def delete(
        self,
        data: Optional[MyapiProtoPetsRemoveRequest] = None,
        headers: Optional[MyapiProtoHeaders] = None,
    ) -> ApiResponse[Any]:
        """Remove an existing pet

        Args:
            data: Request data for the delete operation.

        Returns:
            ApiResponse[Any]: Response containing Any data

        .. deprecated::
           Use pets.remove instead
        """

        warnings.warn(
            "pets_delete is deprecated: Use pets.remove instead",
            DeprecationWarning,
            stacklevel=2,
        )

        path = "/pets.delete"

        params: dict[str, Any] = {}

        return self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            headers_model=headers,
            response_model=None,
)


    def get_first(
        self,
        headers: Optional[MyapiProtoHeaders] = None,
    ) -> ApiResponse[MyapiModelOutputPet | None]:
        """Fetch first pet, if any exists

        Returns:
            ApiResponse[MyapiModelOutputPet | None]: Response containing MyapiModelOutputPet | None data
        """
        path = "/pets.get-first"

        params: dict[str, Any] = {}

        return self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            headers_model=headers,
            response_model=MyapiModelOutputPet | None,
)


    def list(
        self,
        limit: Optional[int | None] = None,
        cursor: Optional[str | None] = None,
        headers: Optional[MyapiProtoHeaders] = None,
    ) -> ApiResponse[MyapiProtoPaginated[MyapiModelOutputPet]]:
        """List available pets

        Args:
            limit: Query parameter: limit (optional)
            cursor: Query parameter: cursor (optional)

        Returns:
            ApiResponse[MyapiProtoPaginated[MyapiModelOutputPet]]: Response containing MyapiProtoPaginated[MyapiModelOutputPet] data
        """
        path = "/pets.list"

        params: dict[str, Any] = {}

        if limit is not None:
            params["limit"] = limit

        if cursor is not None:
            params["cursor"] = cursor

        return self._client._make_request(
            "GET",
            path,
            params=params if params else None,
            headers_model=headers,
            response_model=MyapiProtoPaginated[MyapiModelOutputPet],
)


    def remove(
        self,
        data: Optional[MyapiProtoPetsRemoveRequest] = None,
        headers: Optional[MyapiProtoHeaders] = None,
    ) -> ApiResponse[Any]:
        """Remove an existing pet

        Args:
            data: Request data for the remove operation.

        Returns:
            ApiResponse[Any]: Response containing Any data
        """
        path = "/pets.remove"

        params: dict[str, Any] = {}

        return self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            headers_model=headers,
            response_model=None,
)


    def update(
        self,
        data: Optional[MyapiProtoPetsUpdateRequest] = None,
        headers: Optional[MyapiProtoHeaders] = None,
    ) -> ApiResponse[Any]:
        """Update an existing pet

        Args:
            data: Request data for the update operation.

        Returns:
            ApiResponse[Any]: Response containing Any data
        """
        path = "/pets.update"

        params: dict[str, Any] = {}

        return self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            headers_model=headers,
            response_model=None,
)


class Client(ClientBase):
    """Synchronous client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.health = HealthClient(self)

        self.pets = PetsClient(self)


# Nested class definitions for better organization

class Pet:
    """Grouped types for better organization."""
    Input = MyapiModelInputPet
    Output = MyapiModelOutputPet

    class Kind:
        """Kind variants for this type."""
        Union = MyapiModelKind
        Dog = MyapiModelKindDog
        Cat = MyapiModelKindCat


# External type definitions
StdNumNonZeroU32 = Annotated[int, "Rust NonZero u32 type"]
StdNumNonZeroU64 = Annotated[int, "Rust NonZero u64 type"]
StdNumNonZeroI32 = Annotated[int, "Rust NonZero i32 type"]
StdNumNonZeroI64 = Annotated[int, "Rust NonZero i64 type"]

# Rebuild models to resolve forward references
try:
    MyapiModelBehavior.model_rebuild()
    MyapiModelInputPet.model_rebuild()
    MyapiModelKind.model_rebuild()
    MyapiModelOutputPet.model_rebuild()
    MyapiProtoHeaders.model_rebuild()
    MyapiProtoPaginated.model_rebuild()
    MyapiProtoPetsCreateError.model_rebuild()
    MyapiProtoPetsListError.model_rebuild()
    MyapiProtoPetsListRequest.model_rebuild()
    MyapiProtoPetsRemoveError.model_rebuild()
    MyapiProtoPetsRemoveRequest.model_rebuild()
    MyapiProtoPetsUpdateError.model_rebuild()
    MyapiProtoPetsUpdateRequest.model_rebuild()
except AttributeError:
    # Some types may not have model_rebuild method
    pass

# Factory classes (generated after model rebuild to avoid forward references)
class MyapiModelBehaviorFactory:
    """Factory class for creating MyapiModelBehavior variants with ergonomic syntax.

    MyapiModelBehavior variants
    ""

    @staticmethod
    def calm() -> MyapiModelBehavior:
        """Creates the 'Calm' variant of the MyapiModelBehavior enum."""
        return MyapiModelBehavior("Calm")

    @staticmethod
    def aggressive(field_0, field_1) -> MyapiModelBehavior:
        """Creates the 'Aggressive' variant of the MyapiModelBehavior enum."""
        return MyapiModelBehavior(MyapiModelBehaviorAggressiveVariant(field_0=field_0, field_1=field_1))

    @staticmethod
    def other(description, notes = None) -> MyapiModelBehavior:
        """Creates the 'Other' variant of the MyapiModelBehavior enum."""
        return MyapiModelBehavior(MyapiModelBehaviorOtherVariant(description=description, notes=notes))

class MyapiProtoPetsCreateErrorFactory:
    """Factory class for creating MyapiProtoPetsCreateError variants with ergonomic syntax.

    MyapiProtoPetsCreateError variants
    ""

    @staticmethod
    def conflict() -> MyapiProtoPetsCreateError:
        """Creates the 'Conflict' variant of the MyapiProtoPetsCreateError enum."""
        return MyapiProtoPetsCreateError("Conflict")

    @staticmethod
    def not_authorized() -> MyapiProtoPetsCreateError:
        """Creates the 'NotAuthorized' variant of the MyapiProtoPetsCreateError enum."""
        return MyapiProtoPetsCreateError("NotAuthorized")

    @staticmethod
    def invalid_identity(message) -> MyapiProtoPetsCreateError:
        """Creates the 'InvalidIdentity' variant of the MyapiProtoPetsCreateError enum."""
        return MyapiProtoPetsCreateError(MyapiProtoPetsCreateErrorInvalidIdentityVariant(message=message))

class MyapiModelKindFactory:
    """Factory class for creating MyapiModelKind variants with ergonomic syntax.

    MyapiModelKind variants
    ""

    @staticmethod
    def dog(breed) -> MyapiModelKindDog:
        """Creates the 'dog' variant of the MyapiModelKind enum."""
        return MyapiModelKindDog(breed=breed)

    @staticmethod
    def cat(lives) -> MyapiModelKindCat:
        """Creates the 'cat' variant of the MyapiModelKind enum."""
        return MyapiModelKindCat(lives=lives)


# Testing utilities


def create_myapimodelbehavior_response(value: MyapiModelBehavior) -> ApiResponse[MyapiModelBehavior]:
    """Create a mock ApiResponse for MyapiModelBehavior."""
    return create_api_response(value)


def create_myapimodelinputpet_response(value: MyapiModelInputPet) -> ApiResponse[MyapiModelInputPet]:
    """Create a mock ApiResponse for MyapiModelInputPet."""
    return create_api_response(value)


def create_myapimodelkind_response(value: MyapiModelKind) -> ApiResponse[MyapiModelKind]:
    """Create a mock ApiResponse for MyapiModelKind."""
    return create_api_response(value)


def create_myapimodeloutputpet_response(value: MyapiModelOutputPet) -> ApiResponse[MyapiModelOutputPet]:
    """Create a mock ApiResponse for MyapiModelOutputPet."""
    return create_api_response(value)


def create_myapiprotoheaders_response(value: MyapiProtoHeaders) -> ApiResponse[MyapiProtoHeaders]:
    """Create a mock ApiResponse for MyapiProtoHeaders."""
    return create_api_response(value)


def create_myapiprotopaginated_response(value: MyapiProtoPaginated) -> ApiResponse[MyapiProtoPaginated]:
    """Create a mock ApiResponse for MyapiProtoPaginated."""
    return create_api_response(value)


def create_myapiprotopetscreateerror_response(value: MyapiProtoPetsCreateError) -> ApiResponse[MyapiProtoPetsCreateError]:
    """Create a mock ApiResponse for MyapiProtoPetsCreateError."""
    return create_api_response(value)


def create_myapiprotopetslisterror_response(value: MyapiProtoPetsListError) -> ApiResponse[MyapiProtoPetsListError]:
    """Create a mock ApiResponse for MyapiProtoPetsListError."""
    return create_api_response(value)


def create_myapiprotopetslistrequest_response(value: MyapiProtoPetsListRequest) -> ApiResponse[MyapiProtoPetsListRequest]:
    """Create a mock ApiResponse for MyapiProtoPetsListRequest."""
    return create_api_response(value)


def create_myapiprotopetsremoveerror_response(value: MyapiProtoPetsRemoveError) -> ApiResponse[MyapiProtoPetsRemoveError]:
    """Create a mock ApiResponse for MyapiProtoPetsRemoveError."""
    return create_api_response(value)


def create_myapiprotopetsremoverequest_response(value: MyapiProtoPetsRemoveRequest) -> ApiResponse[MyapiProtoPetsRemoveRequest]:
    """Create a mock ApiResponse for MyapiProtoPetsRemoveRequest."""
    return create_api_response(value)


def create_myapiprotopetsupdateerror_response(value: MyapiProtoPetsUpdateError) -> ApiResponse[MyapiProtoPetsUpdateError]:
    """Create a mock ApiResponse for MyapiProtoPetsUpdateError."""
    return create_api_response(value)


def create_myapiprotopetsupdaterequest_response(value: MyapiProtoPetsUpdateRequest) -> ApiResponse[MyapiProtoPetsUpdateRequest]:
    """Create a mock ApiResponse for MyapiProtoPetsUpdateRequest."""
    return create_api_response(value)


def create_mock_client() -> MockClient:
    """Create a mock client for testing."""
    return MockClient()
