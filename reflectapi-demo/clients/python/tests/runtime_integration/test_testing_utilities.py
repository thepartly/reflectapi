"""Test the generated testing utilities."""

import pytest
from datetime import datetime
from generated import (
    MyapiModelInputPet as Pet,
    MyapiModelOutputPet as PetDetails,
    MyapiModelKind as PetKind,
    MyapiModelKindDog as PetKindDog,
    MyapiModelKindCat as PetKindCat,
    MyapiModelBehavior as Behavior,
    MyapiModelBehaviorAggressiveVariant as BehaviorAggressive,
    MyapiModelBehaviorOtherVariant as BehaviorOther,
    MyapiProtoPaginated as Paginated
)

# For externally tagged enums, unit variants are just string literals
BehaviorCalm = "Calm"

# Note: Testing utilities are not currently generated by the ReflectAPI Python codegen
# This test file contains basic model tests instead of testing utility tests


class TestBasicModelFunctionality:
    """Test basic model functionality without testing utilities."""
    
    def test_pet_creation_with_dog_kind(self):
        """Test creating a Pet with dog kind."""
        dog_kind = PetKindDog(type="dog", breed="Labrador")
        pet = Pet(name="test_dog", kind=dog_kind)
        
        assert pet.name == "test_dog"
        assert pet.kind.type == "dog"
        assert pet.kind.breed == "Labrador"
    
    def test_pet_creation_with_cat_kind(self):
        """Test creating a Pet with cat kind."""
        cat_kind = PetKindCat(type="cat", lives=9)
        pet = Pet(name="test_cat", kind=cat_kind)
        
        assert pet.name == "test_cat"
        assert pet.kind.type == "cat"
        assert pet.kind.lives == 9
    
    def test_pet_details_creation(self):
        """Test creating PetDetails."""
        cat_kind = PetKindCat(type="cat", lives=7)
        pet_details = PetDetails(
            name="detailed_cat",
            kind=cat_kind,
            updated_at=datetime.now()
        )
        
        assert pet_details.name == "detailed_cat"
        assert pet_details.kind.type == "cat"
        assert pet_details.kind.lives == 7
        assert pet_details.updated_at is not None
    
    def test_paginated_creation(self):
        """Test creating Paginated response."""
        cat_kind = PetKindCat(type="cat", lives=9)
        pets = [
            PetDetails(name="pet1", kind=cat_kind, updated_at=datetime.now())
        ]
        paginated = Paginated[PetDetails](items=pets)
        
        assert len(paginated.items) == 1
        assert paginated.items[0].name == "pet1"
    
    def test_behavior_discriminated_union_values(self):
        """Test Behavior discriminated union variant creation."""
        calm = BehaviorCalm
        aggressive = {"Aggressive": [5.0, "test"]}
        other = {"Other": {"description": "Custom", "notes": "Some notes"}}
        
        assert calm == "Calm"
        assert aggressive == {"Aggressive": [5.0, "test"]}
        assert other == {"Other": {"description": "Custom", "notes": "Some notes"}}
    
    def test_pet_with_behaviors(self):
        """Test Pet with behavior list."""
        dog_kind = PetKindDog(type="dog", breed="Retriever")
        calm_behavior = BehaviorCalm
        aggressive_behavior = {"Aggressive": [3.0, "barks"]}
        
        pet = Pet(
            name="active_dog",
            kind=dog_kind,
            behaviors=[calm_behavior, aggressive_behavior]
        )
        
        assert len(pet.behaviors) == 2
        assert pet.behaviors[0].root == "Calm"
        assert isinstance(pet.behaviors[1].root, BehaviorAggressive)
        assert pet.behaviors[1].root.field_0 == 3.0
        assert pet.behaviors[1].root.field_1 == "barks"
    
    def test_union_type_compatibility(self):
        """Test that PetKind union type works correctly."""
        # Both dog and cat should be acceptable as PetKind
        dog_kind = PetKindDog(type="dog", breed="Poodle")
        cat_kind = PetKindCat(type="cat", lives=8)
        
        def process_pet_kind(kind: PetKind) -> str:
            return kind.type
        
        assert process_pet_kind(dog_kind) == "dog" 
        assert process_pet_kind(cat_kind) == "cat"


@pytest.mark.skip(reason="Testing utilities not yet implemented in Python codegen")
class TestMockResponseCreation:
    """Test mock response creation utilities - currently not implemented."""
    pass


@pytest.mark.skip(reason="Testing utilities not yet implemented in Python codegen")
class TestMockClient:
    """Test MockClient functionality - currently not implemented."""
    pass


@pytest.mark.skip(reason="Testing utilities not yet implemented in Python codegen")
class TestResponseMetadata:
    """Test response metadata functionality - currently not implemented."""
    pass


@pytest.mark.skip(reason="Testing utilities not yet implemented in Python codegen")
class TestTestingIntegration:
    """Test integration between testing utilities and models - currently not implemented."""
    pass