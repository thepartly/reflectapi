name: Documentation Preview

on:
  pull_request:


jobs:
  build-preview:
    name: Build Documentation Preview
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Node.js
        uses: actions/setup-node@v4
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
          key: ${{ runner.os }}-cargo-preview-${{ hashFiles('**/Cargo.lock') }}

      - name: Install mdBook and mdbook-keeper
        run: |
          # Only install if not already cached
          if ! command -v mdbook &> /dev/null; then
            cargo install mdbook
          fi
          
          if ! command -v mdbook-keeper &> /dev/null; then
            cargo install mdbook-keeper
          fi


      - name: Build mdBook documentation
        run: |
          cd docs
          mdbook build
          
      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: "4.32.0"
          command: deploy --name reflectapi-docs-preview-pr-${{ github.event.number }} --var COMMIT_SHA:${{ github.sha }}
          workingDirectory: docs
        
      - name: Update PR comment with preview URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const commentBody = `ðŸ“– **Documentation Preview**: https://reflectapi-docs-preview-pr-${{ github.event.number }}.partly.workers.dev\n\n_Updated automatically from commit ${{ github.sha }}_`;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Documentation Preview')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            } else {
              // Create new comment if none exists
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }