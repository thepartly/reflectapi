name: Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Test that all documentation examples compile
  test-docs:
    name: Test Documentation Examples
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.78.0
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Test documentation examples
        run: |
          # Test that all doctests pass
          cargo test --doc --all-features
          
          # Test that documentation compiles without warnings
          cargo doc --no-deps --all-features --document-private-items
          
      - name: Test mdBook examples
        run: |
          # Extract and test code examples from mdBook
          # This would be implemented as part of the testing pipeline
          echo "TODO: Implement mdBook example testing"

  # Build and deploy documentation site
  build-and-deploy:
    name: Build and Deploy Documentation
    runs-on: ubuntu-latest
    needs: test-docs
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Install mdBook
        run: |
          curl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.36/mdbook-v0.4.36-x86_64-unknown-linux-gnu.tar.gz | tar -xz
          echo "$(pwd)" >> $GITHUB_PATH
          
      - name: Build mdBook documentation
        run: |
          cd docs
          mdbook build
          
      - name: Setup Pages
        uses: actions/configure-pages@v3
        
      - name: Upload documentation
        uses: actions/upload-pages-artifact@v2
        with:
          path: docs/book
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        
  # Generate and test all client examples
  test-clients:
    name: Test Generated Clients
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.78.0
          
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install uv
        run: pip install uv
        
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-clients-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Build demo and generate clients
        run: |
          # Build the demo server to generate schema
          cd reflectapi-demo
          cargo run --bin reflectapi-demo &
          SERVER_PID=$!
          sleep 5  # Wait for server to start
          
          # Generate all client types
          cd ..
          cargo run --bin reflectapi-cli -- codegen --language typescript --schema reflectapi-demo/reflectapi.json --output test-clients/typescript
          cargo run --bin reflectapi-cli -- codegen --language python --schema reflectapi-demo/reflectapi.json --output test-clients/python  
          cargo run --bin reflectapi-cli -- codegen --language rust --schema reflectapi-demo/reflectapi.json --output test-clients/rust
          
          # Kill the demo server
          kill $SERVER_PID
          
      - name: Test TypeScript client
        run: |
          cd test-clients/typescript
          npm install
          npm run build
          
      - name: Test Python client  
        run: |
          cd test-clients/python
          uv pip install -e ../../reflectapi-python-runtime
          uv run python -m py_compile generated.py
          uv run ruff check generated.py
          
      - name: Test Rust client
        run: |
          cd test-clients/rust
          cargo check